Package scss;

Helpers
    all = [0 .. 0xFFFF];
    letter = ['a'..'z'] | ['A'..'Z'];
    digit = ['0'..'9'];

    string_char = [[' '..'~'] - '"'] | '"' '"';

    cr = 13;
    lf = 10;
    tab = 9;
    eol = cr lf | cr | lf;
    not_cr_lf = [all - [cr + lf]];
    not_star = [all - '*'];
    not_star_slash =  [not_star - '/'];
    short_comment = '//' not_cr_lf* eol;
    long_comment = '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';
    comment = short_comment | long_comment;
    identifier      = ('_' | letter | digit) ('-' | '_' | letter | digit)* ;

Tokens
    null            = 'null';
    in              = 'in';
    default         = '!default';
    unit            = '%'|'px'|'cm'|'mm'|'in'|'pt'|'pc'|'em'|'ex'|'deg'|'rad'|'grad'|'ms'|'s'|'hz'|'khz';

//    combine_compare = '&&' | '||';
    ellipsis        = '...';

    lparen          = '(';
    rparen          = ')';
    blockstart      = '{';
    blockend        = '}';
    lbrack          = '[';
    rbrack          = ']';
    gt              = '>';
    til             = '~';
    lt              = '<';
    colon           = ':';
    semi            = ';';
    comma           = ',';
    dot             = '.';
    dollar          = '$';
    at              = '@';
    and             = '&';
    double_and      = '&&';
    or              = '||';
    hash            = '#';
    coloncolon      = '::';
    plus            = '+';
    star            = '**';
    times           = '*';
    div             = '/';
    minus           = '-';
    perc            = '%';

    eqeq            = '==';
    noteq           = '!=';
    eq              = '=';
    pipe_eq         = '|=';
    tild_eq         = '~=';

    mixin           = '@mixin';
    function        = '@function';
    at_else         = '@else';
    if              = 'if';
    at_if           = '@if';
    at_for          = '@for';
    at_while        = '@while';
    at_each         = '@each';
    include         = '@include';
    import          = '@import';
    return          = '@return';
    from            = 'from';
    through         = 'through';
    pound_default   = '!default';

    variable        = '@' identifier ;
    identifier      = identifier ;
    string_literal  = '"' string_char* '"';
    number_literal  = '-' ( digit* '.' )? digit+ | ( digit* '.' )? digit+ ;
    color           = '#' ( digit | ['a'..'f'] | ['A'..'F'] )+;
    url             = 'url' '{' string_char* '}';
    blank = (' ' | cr | lf | tab)+;
    comment         = comment;

Ignored Tokens
    blank, comment;

Productions
    stylesheet =
        statement* ;

    statement =
        {ruleset} selectors block |
        {mixin} mixin ident params? block |
        {function} function ident lparen params? rparen block |
        {variable} variable colon values default? semi |
        {include_simple} include ident semi |
        {if} at_if conditions block else_if_statement* else_statement? |
        {for} at_for variable from [first]:number_literal through [second]:number_literal block |
        {while} at_while conditions block |
        {each} at_each variable comma_variable* in each_values block ;

    each_values =
        {idents} ident comma_ident* |
        {list} list_values |
        {map} map_values ;

    comma_ident =
        comma ident ;

    list_values =
        expression comma_expression* ;

    comma_expression =
        comma expression ;

    map_values =
        lparen key_value comma_key_value* rparen ;

    comma_key_value =
        comma key_value ;

    key_value =
        string_literal colon expression ;

    comma_variable =
        comma variable ;

    identifier_value =
        {simple} ident |
        {colon} ident colon values ;

    else_if_statement =
        at_else if conditions block ;

    else_statement =
        at_else block ;

    params =
        lparen [first]:param [rest]:param* rparen ellipsis;

    param =
        {with_comma} comma dollar ident param_optional_value|
        {simple} dollar ident param_optional_value ;

    param_optional_value =
        colon [first]:expression [rest]:expression* ;

    block =
        blockstart content_in_block* blockend ;

    content_in_block =
        {property} property |
        {statement} statement ;

    selectors =
        [first]:prefix_element [rest]:prefix_element* attrib*;

    prefix_element =
        {gt} gt [second]:element |
        {plus} plus element |
        {til} til element |
        {comma} comma prefix_element |
        {simple} element;

    element =
        {hash} hash element |
        {dot} dot element |
        {simple} simple_element ;

    simple_element =
        {ident} ident |
        {and} and |
        {star} star ;

    attrib =
        {eq}lbrack identifier eq string_literal rbrack |
        {pipe_eq} lbrack identifier pipe_eq string_literal rbrack |
        {tild_eq} lbrack identifier tild_eq string_literal rbrack ;

    property =
        ident colon values semi;

    ident =
        {simple} identifier |
        {interpolation} hash blockstart dollar identifier blockend ;

    function_call =
        {function_call} ident lparen values? rparen ;

    values =
        [first]:conditions [rest]:comma_conditions* ;

    comma_conditions =
        comma conditions ;

    function_body =
        function_statement* function_return ;

    function_return =
        return conditions semi ;

    function_statement =
        {arith} arith semi |
        {other_statement} statement ;

    conditions =
        {and} [left]:conditions double_and [right]:condition |
        {simple} [conditions]:condition;

    condition =
        {or} [left]:condition or [right]:comparison |
        {simple} [expression]:comparison;

    comparison =
        {eq} [left]:comparison eqeq [right]:arith |
        {neq} [left]:comparison noteq [right]:arith |
        {lt} [left]:comparison lt [right]:arith |
        {gt} [left]:comparison gt [right]:arith |
        {simple} [expression]:arith;

    arith =
        {minus} [first]:arith minus [second]:factor |
        {plus} [first]:arith plus [second]:factor |
        {simple} [calculation]:factor;

    factor =
        {times} [first]:factor [mul]:times [second]:expression |
        {div} [first]:factor div [second]:expression |
        {simple} [calculation]:expression;

    expression =
        {number} number_literal |
        {number_unit} number_literal unit |
        {color} color |
        {string} string_literal |
        {null} null |
        {url} url |
        {variable_name} variable |
        {function_call} identifier lparen conditions? rparen |
        {command_statement} lparen conditions rparen ;