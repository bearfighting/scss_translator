Package scss;

Helpers
    all = [0 .. 0xFFFF];
    letter = ['a'..'z'] | ['A'..'Z'];
    digit = ['0'..'9'];

    string_char = [[' '..'~'] - '"'] | '"' '"';

    cr = 13;
    lf = 10;
    tab = 9;
    eol = cr lf | cr | lf;
    not_cr_lf = [all - [cr + lf]];
    not_star = [all - '*'];
    not_star_slash =  [not_star - '/'];
    short_comment = '//' not_cr_lf* eol;
    long_comment = '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';
    comment = short_comment | long_comment;

Tokens
    null            = 'null';
    in              = 'in';
    default         = '!default';
    unit            = '%'|'px'|'cm'|'mm'|'in'|'pt'|'pc'|'em'|'ex'|'deg'|'rad'|'grad'|'ms'|'s'|'hz'|'khz';

    combine_compare = '&&' | '||';
    ellipsis        = '...';

    lparen          = '(';
    rparen          = ')';
    blockstart      = '{';
    blockend        = '}';
    lbrack          = '[';
    rbrack          = ']';
    gt              = '>';
    til             = '~';
    lt              = '<';
    colon           = ':';
    semi            = ';';
    comma           = ',';
    dot             = '.';
    dollar          = '$';
    at              = '@';
    and             = '&';
    hash            = '#';
    coloncolon      = '::';
    plus            = '+';
    star            = '**';
    times           = '*';
    div             = '/';
    minus           = '-';
    perc            = '%';

    eqeq            = '==';
    noteq           = '!=';
    eq              = '=';
    pipe_eq         = '|=';
    tild_eq         = '~=';

    mixin           = '@mixin';
    function        = '@function';
    at_else         = '@else';
    if              = 'if';
    at_if           = '@if';
    at_for          = '@for';
    at_while        = '@while';
    at_each         = '@each';
    include         = '@include';
    import          = '@import';
    return          = '@return';
    from            = 'from';
    through         = 'through';
    pound_default   = '!default';

    identifier      = ('_' | letter | digit) ('-' | '_' | letter | digit)* ;
    string_literal  = '"' string_char* '"';
    number_literal  = '-' ( digit* '.' )? digit+ | ( digit* '.' )? digit+ ;
    color           = '#' ( digit | ['a'..'f'] | ['A'..'F'] )+;
    url             = 'url' '{' string_char* '}';
    blank = (' ' | cr | lf | tab)+;
    comment         = comment;

Ignored Tokens
    blank, comment;

Productions
    stylesheet =
        statement* ;

    statement =
        {nested} at nest selectors blockstart stylesheet blockend ;

    nest =
    {ident} at [first]:identifier [rest]:identifier* pseudo* selectors |
    {and} at and identifier* pseudo* selectors ;

    selectors =
        selector comma_selector*;

    comma_selector =
        comma selector;

    selector =
        {normal} [first]:element  [prefix]:prefix_element* attrib* pseudo?;

    attrib =
        {ident} lbrack [first]:identifier attribut_relate [second]:identifier rbrack |
        {string} lbrack [first]:identifier attribut_relate string_literal rbrack ;

    pseudo =
        {simple_colon} colon identifier |
        {double_colon} [first]:colon [second]:colon identifier |
        {function_call} function_call;

    function_call =
        identifier lparen values? rparen;

    attribut_relate =
        {eq}eq |
        {pipe} pipe_eq |
        {tild} tild_eq ;

    prefix_element =
        {prefix} selector_prefix element ;

    element =
        {simple} ident |
        {hash} hash ident |
        {dot} dot ident |
        {and} and |
        {star} star;

    selector_prefix =
        {gt} gt |
        {plus} plus |
        {til} til ;

    ident =
        {ident} identifier |
        {part} [first]:identifier_part ;

    identifier_part =
        {part} hash blockstart dollar identifier blockend ;

    values =
        {statements} [first]:arith [rest]:comma_arith* ;

    comma_arith =
        comma arith ;

    function_body =
        function_statement* function_return ;

    function_return =
        return arith semi ;

    function_statement =
        {arith} arith semi |
        {other_statement} statement ;

    arith =
        {minus} [first]:arith minus [second]:factor |
        {plus} [first]:arith plus [second]:factor |
        {simple} [calculation]:factor;

    factor =
        {times} [first]:factor [mul]:times [second]:expression |
        {div} [first]:factor div [second]:expression |
        {simple} [calculation]:expression;

    expression =
        {number} number_literal |
        {number_unit} number_literal unit |
        {color} color |
        {string} string_literal |
        {null} null |
        {url} url |
        {variable_name} at identifier |
        {function_call} identifier lparen values? rparen |
        {command_statement} lparen arith rparen;