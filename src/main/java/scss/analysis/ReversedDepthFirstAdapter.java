/* This file was generated by SableCC (http://www.sablecc.org/). */

package scss.analysis;

import java.util.*;
import scss.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStylesheet().apply(this);
        outStart(node);
    }

    public void inAStylesheet(AStylesheet node)
    {
        defaultIn(node);
    }

    public void outAStylesheet(AStylesheet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStylesheet(AStylesheet node)
    {
        inAStylesheet(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        outAStylesheet(node);
    }

    public void inARulesetStatement(ARulesetStatement node)
    {
        defaultIn(node);
    }

    public void outARulesetStatement(ARulesetStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARulesetStatement(ARulesetStatement node)
    {
        inARulesetStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getSelectors() != null)
        {
            node.getSelectors().apply(this);
        }
        outARulesetStatement(node);
    }

    public void inAMixinStatement(AMixinStatement node)
    {
        defaultIn(node);
    }

    public void outAMixinStatement(AMixinStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMixinStatement(AMixinStatement node)
    {
        inAMixinStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getMixin() != null)
        {
            node.getMixin().apply(this);
        }
        outAMixinStatement(node);
    }

    public void inAFunctionStatement(AFunctionStatement node)
    {
        defaultIn(node);
    }

    public void outAFunctionStatement(AFunctionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionStatement(AFunctionStatement node)
    {
        inAFunctionStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionStatement(node);
    }

    public void inAVariableStatement(AVariableStatement node)
    {
        defaultIn(node);
    }

    public void outAVariableStatement(AVariableStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableStatement(AVariableStatement node)
    {
        inAVariableStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getDefault() != null)
        {
            node.getDefault().apply(this);
        }
        if(node.getValues() != null)
        {
            node.getValues().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outAVariableStatement(node);
    }

    public void inAIncludeSimpleStatement(AIncludeSimpleStatement node)
    {
        defaultIn(node);
    }

    public void outAIncludeSimpleStatement(AIncludeSimpleStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncludeSimpleStatement(AIncludeSimpleStatement node)
    {
        inAIncludeSimpleStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getInclude() != null)
        {
            node.getInclude().apply(this);
        }
        outAIncludeSimpleStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getElseStatement() != null)
        {
            node.getElseStatement().apply(this);
        }
        {
            List<PElseIfStatement> copy = new ArrayList<PElseIfStatement>(node.getElseIfStatement());
            Collections.reverse(copy);
            for(PElseIfStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getConditions() != null)
        {
            node.getConditions().apply(this);
        }
        if(node.getAtIf() != null)
        {
            node.getAtIf().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getThrough() != null)
        {
            node.getThrough().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getAtFor() != null)
        {
            node.getAtFor().apply(this);
        }
        outAForStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getConditions() != null)
        {
            node.getConditions().apply(this);
        }
        if(node.getAtWhile() != null)
        {
            node.getAtWhile().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAEachStatement(AEachStatement node)
    {
        defaultIn(node);
    }

    public void outAEachStatement(AEachStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEachStatement(AEachStatement node)
    {
        inAEachStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getEachValues() != null)
        {
            node.getEachValues().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        {
            List<PCommaVariable> copy = new ArrayList<PCommaVariable>(node.getCommaVariable());
            Collections.reverse(copy);
            for(PCommaVariable e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getAtEach() != null)
        {
            node.getAtEach().apply(this);
        }
        outAEachStatement(node);
    }

    public void inAIdentsEachValues(AIdentsEachValues node)
    {
        defaultIn(node);
    }

    public void outAIdentsEachValues(AIdentsEachValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentsEachValues(AIdentsEachValues node)
    {
        inAIdentsEachValues(node);
        {
            List<PCommaIdent> copy = new ArrayList<PCommaIdent>(node.getCommaIdent());
            Collections.reverse(copy);
            for(PCommaIdent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAIdentsEachValues(node);
    }

    public void inAListEachValues(AListEachValues node)
    {
        defaultIn(node);
    }

    public void outAListEachValues(AListEachValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListEachValues(AListEachValues node)
    {
        inAListEachValues(node);
        if(node.getListValues() != null)
        {
            node.getListValues().apply(this);
        }
        outAListEachValues(node);
    }

    public void inAMapEachValues(AMapEachValues node)
    {
        defaultIn(node);
    }

    public void outAMapEachValues(AMapEachValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMapEachValues(AMapEachValues node)
    {
        inAMapEachValues(node);
        if(node.getMapValues() != null)
        {
            node.getMapValues().apply(this);
        }
        outAMapEachValues(node);
    }

    public void inACommaIdent(ACommaIdent node)
    {
        defaultIn(node);
    }

    public void outACommaIdent(ACommaIdent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaIdent(ACommaIdent node)
    {
        inACommaIdent(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACommaIdent(node);
    }

    public void inAListValues(AListValues node)
    {
        defaultIn(node);
    }

    public void outAListValues(AListValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListValues(AListValues node)
    {
        inAListValues(node);
        {
            List<PCommaExpression> copy = new ArrayList<PCommaExpression>(node.getCommaExpression());
            Collections.reverse(copy);
            for(PCommaExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAListValues(node);
    }

    public void inACommaExpression(ACommaExpression node)
    {
        defaultIn(node);
    }

    public void outACommaExpression(ACommaExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaExpression(ACommaExpression node)
    {
        inACommaExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACommaExpression(node);
    }

    public void inAMapValues(AMapValues node)
    {
        defaultIn(node);
    }

    public void outAMapValues(AMapValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMapValues(AMapValues node)
    {
        inAMapValues(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        {
            List<PCommaKeyValue> copy = new ArrayList<PCommaKeyValue>(node.getCommaKeyValue());
            Collections.reverse(copy);
            for(PCommaKeyValue e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getKeyValue() != null)
        {
            node.getKeyValue().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        outAMapValues(node);
    }

    public void inACommaKeyValue(ACommaKeyValue node)
    {
        defaultIn(node);
    }

    public void outACommaKeyValue(ACommaKeyValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaKeyValue(ACommaKeyValue node)
    {
        inACommaKeyValue(node);
        if(node.getKeyValue() != null)
        {
            node.getKeyValue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACommaKeyValue(node);
    }

    public void inAKeyValue(AKeyValue node)
    {
        defaultIn(node);
    }

    public void outAKeyValue(AKeyValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKeyValue(AKeyValue node)
    {
        inAKeyValue(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAKeyValue(node);
    }

    public void inACommaVariable(ACommaVariable node)
    {
        defaultIn(node);
    }

    public void outACommaVariable(ACommaVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaVariable(ACommaVariable node)
    {
        inACommaVariable(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACommaVariable(node);
    }

    public void inASimpleIdentifierValue(ASimpleIdentifierValue node)
    {
        defaultIn(node);
    }

    public void outASimpleIdentifierValue(ASimpleIdentifierValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleIdentifierValue(ASimpleIdentifierValue node)
    {
        inASimpleIdentifierValue(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outASimpleIdentifierValue(node);
    }

    public void inAColonIdentifierValue(AColonIdentifierValue node)
    {
        defaultIn(node);
    }

    public void outAColonIdentifierValue(AColonIdentifierValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColonIdentifierValue(AColonIdentifierValue node)
    {
        inAColonIdentifierValue(node);
        if(node.getValues() != null)
        {
            node.getValues().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAColonIdentifierValue(node);
    }

    public void inAElseIfStatement(AElseIfStatement node)
    {
        defaultIn(node);
    }

    public void outAElseIfStatement(AElseIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseIfStatement(AElseIfStatement node)
    {
        inAElseIfStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getConditions() != null)
        {
            node.getConditions().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getAtElse() != null)
        {
            node.getAtElse().apply(this);
        }
        outAElseIfStatement(node);
    }

    public void inAElseStatement(AElseStatement node)
    {
        defaultIn(node);
    }

    public void outAElseStatement(AElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseStatement(AElseStatement node)
    {
        inAElseStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getAtElse() != null)
        {
            node.getAtElse().apply(this);
        }
        outAElseStatement(node);
    }

    public void inAParams(AParams node)
    {
        defaultIn(node);
    }

    public void outAParams(AParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParams(AParams node)
    {
        inAParams(node);
        if(node.getEllipsis() != null)
        {
            node.getEllipsis().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        {
            List<PParam> copy = new ArrayList<PParam>(node.getRest());
            Collections.reverse(copy);
            for(PParam e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        outAParams(node);
    }

    public void inAWithCommaParam(AWithCommaParam node)
    {
        defaultIn(node);
    }

    public void outAWithCommaParam(AWithCommaParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithCommaParam(AWithCommaParam node)
    {
        inAWithCommaParam(node);
        if(node.getParamOptionalValue() != null)
        {
            node.getParamOptionalValue().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getDollar() != null)
        {
            node.getDollar().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAWithCommaParam(node);
    }

    public void inASimpleParam(ASimpleParam node)
    {
        defaultIn(node);
    }

    public void outASimpleParam(ASimpleParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleParam(ASimpleParam node)
    {
        inASimpleParam(node);
        if(node.getParamOptionalValue() != null)
        {
            node.getParamOptionalValue().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getDollar() != null)
        {
            node.getDollar().apply(this);
        }
        outASimpleParam(node);
    }

    public void inAParamOptionalValue(AParamOptionalValue node)
    {
        defaultIn(node);
    }

    public void outAParamOptionalValue(AParamOptionalValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamOptionalValue(AParamOptionalValue node)
    {
        inAParamOptionalValue(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getRest());
            Collections.reverse(copy);
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAParamOptionalValue(node);
    }

    public void inABlock(ABlock node)
    {
        defaultIn(node);
    }

    public void outABlock(ABlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        inABlock(node);
        if(node.getBlockend() != null)
        {
            node.getBlockend().apply(this);
        }
        {
            List<PContentInBlock> copy = new ArrayList<PContentInBlock>(node.getContentInBlock());
            Collections.reverse(copy);
            for(PContentInBlock e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBlockstart() != null)
        {
            node.getBlockstart().apply(this);
        }
        outABlock(node);
    }

    public void inAPropertyContentInBlock(APropertyContentInBlock node)
    {
        defaultIn(node);
    }

    public void outAPropertyContentInBlock(APropertyContentInBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPropertyContentInBlock(APropertyContentInBlock node)
    {
        inAPropertyContentInBlock(node);
        if(node.getProperty() != null)
        {
            node.getProperty().apply(this);
        }
        outAPropertyContentInBlock(node);
    }

    public void inAStatementContentInBlock(AStatementContentInBlock node)
    {
        defaultIn(node);
    }

    public void outAStatementContentInBlock(AStatementContentInBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementContentInBlock(AStatementContentInBlock node)
    {
        inAStatementContentInBlock(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementContentInBlock(node);
    }

    public void inASelectors(ASelectors node)
    {
        defaultIn(node);
    }

    public void outASelectors(ASelectors node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectors(ASelectors node)
    {
        inASelectors(node);
        {
            List<PAttrib> copy = new ArrayList<PAttrib>(node.getAttrib());
            Collections.reverse(copy);
            for(PAttrib e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PPrefixElement> copy = new ArrayList<PPrefixElement>(node.getRest());
            Collections.reverse(copy);
            for(PPrefixElement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outASelectors(node);
    }

    public void inAGtPrefixElement(AGtPrefixElement node)
    {
        defaultIn(node);
    }

    public void outAGtPrefixElement(AGtPrefixElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtPrefixElement(AGtPrefixElement node)
    {
        inAGtPrefixElement(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtPrefixElement(node);
    }

    public void inAPlusPrefixElement(APlusPrefixElement node)
    {
        defaultIn(node);
    }

    public void outAPlusPrefixElement(APlusPrefixElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusPrefixElement(APlusPrefixElement node)
    {
        inAPlusPrefixElement(node);
        if(node.getElement() != null)
        {
            node.getElement().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusPrefixElement(node);
    }

    public void inATilPrefixElement(ATilPrefixElement node)
    {
        defaultIn(node);
    }

    public void outATilPrefixElement(ATilPrefixElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATilPrefixElement(ATilPrefixElement node)
    {
        inATilPrefixElement(node);
        if(node.getElement() != null)
        {
            node.getElement().apply(this);
        }
        if(node.getTil() != null)
        {
            node.getTil().apply(this);
        }
        outATilPrefixElement(node);
    }

    public void inACommaPrefixElement(ACommaPrefixElement node)
    {
        defaultIn(node);
    }

    public void outACommaPrefixElement(ACommaPrefixElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaPrefixElement(ACommaPrefixElement node)
    {
        inACommaPrefixElement(node);
        if(node.getPrefixElement() != null)
        {
            node.getPrefixElement().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACommaPrefixElement(node);
    }

    public void inASimplePrefixElement(ASimplePrefixElement node)
    {
        defaultIn(node);
    }

    public void outASimplePrefixElement(ASimplePrefixElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplePrefixElement(ASimplePrefixElement node)
    {
        inASimplePrefixElement(node);
        if(node.getElement() != null)
        {
            node.getElement().apply(this);
        }
        outASimplePrefixElement(node);
    }

    public void inAHashElement(AHashElement node)
    {
        defaultIn(node);
    }

    public void outAHashElement(AHashElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHashElement(AHashElement node)
    {
        inAHashElement(node);
        if(node.getElement() != null)
        {
            node.getElement().apply(this);
        }
        if(node.getHash() != null)
        {
            node.getHash().apply(this);
        }
        outAHashElement(node);
    }

    public void inADotElement(ADotElement node)
    {
        defaultIn(node);
    }

    public void outADotElement(ADotElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADotElement(ADotElement node)
    {
        inADotElement(node);
        if(node.getElement() != null)
        {
            node.getElement().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outADotElement(node);
    }

    public void inASimpleElement(ASimpleElement node)
    {
        defaultIn(node);
    }

    public void outASimpleElement(ASimpleElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleElement(ASimpleElement node)
    {
        inASimpleElement(node);
        if(node.getSimpleElement() != null)
        {
            node.getSimpleElement().apply(this);
        }
        outASimpleElement(node);
    }

    public void inAIdentSimpleElement(AIdentSimpleElement node)
    {
        defaultIn(node);
    }

    public void outAIdentSimpleElement(AIdentSimpleElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentSimpleElement(AIdentSimpleElement node)
    {
        inAIdentSimpleElement(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAIdentSimpleElement(node);
    }

    public void inAAndSimpleElement(AAndSimpleElement node)
    {
        defaultIn(node);
    }

    public void outAAndSimpleElement(AAndSimpleElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndSimpleElement(AAndSimpleElement node)
    {
        inAAndSimpleElement(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndSimpleElement(node);
    }

    public void inAStarSimpleElement(AStarSimpleElement node)
    {
        defaultIn(node);
    }

    public void outAStarSimpleElement(AStarSimpleElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarSimpleElement(AStarSimpleElement node)
    {
        inAStarSimpleElement(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAStarSimpleElement(node);
    }

    public void inAEqAttrib(AEqAttrib node)
    {
        defaultIn(node);
    }

    public void outAEqAttrib(AEqAttrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqAttrib(AEqAttrib node)
    {
        inAEqAttrib(node);
        if(node.getRbrack() != null)
        {
            node.getRbrack().apply(this);
        }
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLbrack() != null)
        {
            node.getLbrack().apply(this);
        }
        outAEqAttrib(node);
    }

    public void inAPipeEqAttrib(APipeEqAttrib node)
    {
        defaultIn(node);
    }

    public void outAPipeEqAttrib(APipeEqAttrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPipeEqAttrib(APipeEqAttrib node)
    {
        inAPipeEqAttrib(node);
        if(node.getRbrack() != null)
        {
            node.getRbrack().apply(this);
        }
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        if(node.getPipeEq() != null)
        {
            node.getPipeEq().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLbrack() != null)
        {
            node.getLbrack().apply(this);
        }
        outAPipeEqAttrib(node);
    }

    public void inATildEqAttrib(ATildEqAttrib node)
    {
        defaultIn(node);
    }

    public void outATildEqAttrib(ATildEqAttrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATildEqAttrib(ATildEqAttrib node)
    {
        inATildEqAttrib(node);
        if(node.getRbrack() != null)
        {
            node.getRbrack().apply(this);
        }
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        if(node.getTildEq() != null)
        {
            node.getTildEq().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLbrack() != null)
        {
            node.getLbrack().apply(this);
        }
        outATildEqAttrib(node);
    }

    public void inAProperty(AProperty node)
    {
        defaultIn(node);
    }

    public void outAProperty(AProperty node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProperty(AProperty node)
    {
        inAProperty(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getValues() != null)
        {
            node.getValues().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAProperty(node);
    }

    public void inASimpleIdent(ASimpleIdent node)
    {
        defaultIn(node);
    }

    public void outASimpleIdent(ASimpleIdent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleIdent(ASimpleIdent node)
    {
        inASimpleIdent(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASimpleIdent(node);
    }

    public void inAInterpolationIdent(AInterpolationIdent node)
    {
        defaultIn(node);
    }

    public void outAInterpolationIdent(AInterpolationIdent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterpolationIdent(AInterpolationIdent node)
    {
        inAInterpolationIdent(node);
        if(node.getBlockend() != null)
        {
            node.getBlockend().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDollar() != null)
        {
            node.getDollar().apply(this);
        }
        if(node.getBlockstart() != null)
        {
            node.getBlockstart().apply(this);
        }
        if(node.getHash() != null)
        {
            node.getHash().apply(this);
        }
        outAInterpolationIdent(node);
    }

    public void inAFunctionCallFunctionCall(AFunctionCallFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallFunctionCall(AFunctionCallFunctionCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallFunctionCall(AFunctionCallFunctionCall node)
    {
        inAFunctionCallFunctionCall(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getValues() != null)
        {
            node.getValues().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAFunctionCallFunctionCall(node);
    }

    public void inAValues(AValues node)
    {
        defaultIn(node);
    }

    public void outAValues(AValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValues(AValues node)
    {
        inAValues(node);
        {
            List<PCommaConditions> copy = new ArrayList<PCommaConditions>(node.getRest());
            Collections.reverse(copy);
            for(PCommaConditions e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAValues(node);
    }

    public void inACommaConditions(ACommaConditions node)
    {
        defaultIn(node);
    }

    public void outACommaConditions(ACommaConditions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaConditions(ACommaConditions node)
    {
        inACommaConditions(node);
        if(node.getConditions() != null)
        {
            node.getConditions().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACommaConditions(node);
    }

    public void inAFunctionBody(AFunctionBody node)
    {
        defaultIn(node);
    }

    public void outAFunctionBody(AFunctionBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionBody(AFunctionBody node)
    {
        inAFunctionBody(node);
        if(node.getFunctionReturn() != null)
        {
            node.getFunctionReturn().apply(this);
        }
        {
            List<PFunctionStatement> copy = new ArrayList<PFunctionStatement>(node.getFunctionStatement());
            Collections.reverse(copy);
            for(PFunctionStatement e : copy)
            {
                e.apply(this);
            }
        }
        outAFunctionBody(node);
    }

    public void inAFunctionReturn(AFunctionReturn node)
    {
        defaultIn(node);
    }

    public void outAFunctionReturn(AFunctionReturn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionReturn(AFunctionReturn node)
    {
        inAFunctionReturn(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getConditions() != null)
        {
            node.getConditions().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAFunctionReturn(node);
    }

    public void inAArithFunctionStatement(AArithFunctionStatement node)
    {
        defaultIn(node);
    }

    public void outAArithFunctionStatement(AArithFunctionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithFunctionStatement(AArithFunctionStatement node)
    {
        inAArithFunctionStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getArith() != null)
        {
            node.getArith().apply(this);
        }
        outAArithFunctionStatement(node);
    }

    public void inAOtherStatementFunctionStatement(AOtherStatementFunctionStatement node)
    {
        defaultIn(node);
    }

    public void outAOtherStatementFunctionStatement(AOtherStatementFunctionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherStatementFunctionStatement(AOtherStatementFunctionStatement node)
    {
        inAOtherStatementFunctionStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAOtherStatementFunctionStatement(node);
    }

    public void inAAndConditions(AAndConditions node)
    {
        defaultIn(node);
    }

    public void outAAndConditions(AAndConditions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndConditions(AAndConditions node)
    {
        inAAndConditions(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getDoubleAnd() != null)
        {
            node.getDoubleAnd().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAndConditions(node);
    }

    public void inASimpleConditions(ASimpleConditions node)
    {
        defaultIn(node);
    }

    public void outASimpleConditions(ASimpleConditions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleConditions(ASimpleConditions node)
    {
        inASimpleConditions(node);
        if(node.getConditions() != null)
        {
            node.getConditions().apply(this);
        }
        outASimpleConditions(node);
    }

    public void inAOrCondition(AOrCondition node)
    {
        defaultIn(node);
    }

    public void outAOrCondition(AOrCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrCondition(AOrCondition node)
    {
        inAOrCondition(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAOrCondition(node);
    }

    public void inASimpleCondition(ASimpleCondition node)
    {
        defaultIn(node);
    }

    public void outASimpleCondition(ASimpleCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleCondition(ASimpleCondition node)
    {
        inASimpleCondition(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASimpleCondition(node);
    }

    public void inAEqComparison(AEqComparison node)
    {
        defaultIn(node);
    }

    public void outAEqComparison(AEqComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqComparison(AEqComparison node)
    {
        inAEqComparison(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getEqeq() != null)
        {
            node.getEqeq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAEqComparison(node);
    }

    public void inANeqComparison(ANeqComparison node)
    {
        defaultIn(node);
    }

    public void outANeqComparison(ANeqComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqComparison(ANeqComparison node)
    {
        inANeqComparison(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getNoteq() != null)
        {
            node.getNoteq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outANeqComparison(node);
    }

    public void inALtComparison(ALtComparison node)
    {
        defaultIn(node);
    }

    public void outALtComparison(ALtComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtComparison(ALtComparison node)
    {
        inALtComparison(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALtComparison(node);
    }

    public void inAGtComparison(AGtComparison node)
    {
        defaultIn(node);
    }

    public void outAGtComparison(AGtComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtComparison(AGtComparison node)
    {
        inAGtComparison(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGtComparison(node);
    }

    public void inASimpleComparison(ASimpleComparison node)
    {
        defaultIn(node);
    }

    public void outASimpleComparison(ASimpleComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleComparison(ASimpleComparison node)
    {
        inASimpleComparison(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASimpleComparison(node);
    }

    public void inAMinusArith(AMinusArith node)
    {
        defaultIn(node);
    }

    public void outAMinusArith(AMinusArith node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusArith(AMinusArith node)
    {
        inAMinusArith(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAMinusArith(node);
    }

    public void inAPlusArith(APlusArith node)
    {
        defaultIn(node);
    }

    public void outAPlusArith(APlusArith node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusArith(APlusArith node)
    {
        inAPlusArith(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAPlusArith(node);
    }

    public void inASimpleArith(ASimpleArith node)
    {
        defaultIn(node);
    }

    public void outASimpleArith(ASimpleArith node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleArith(ASimpleArith node)
    {
        inASimpleArith(node);
        if(node.getCalculation() != null)
        {
            node.getCalculation().apply(this);
        }
        outASimpleArith(node);
    }

    public void inATimesFactor(ATimesFactor node)
    {
        defaultIn(node);
    }

    public void outATimesFactor(ATimesFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimesFactor(ATimesFactor node)
    {
        inATimesFactor(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getMul() != null)
        {
            node.getMul().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outATimesFactor(node);
    }

    public void inADivFactor(ADivFactor node)
    {
        defaultIn(node);
    }

    public void outADivFactor(ADivFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        inADivFactor(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outADivFactor(node);
    }

    public void inASimpleFactor(ASimpleFactor node)
    {
        defaultIn(node);
    }

    public void outASimpleFactor(ASimpleFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleFactor(ASimpleFactor node)
    {
        inASimpleFactor(node);
        if(node.getCalculation() != null)
        {
            node.getCalculation().apply(this);
        }
        outASimpleFactor(node);
    }

    public void inANumberExpression(ANumberExpression node)
    {
        defaultIn(node);
    }

    public void outANumberExpression(ANumberExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberExpression(ANumberExpression node)
    {
        inANumberExpression(node);
        if(node.getNumberLiteral() != null)
        {
            node.getNumberLiteral().apply(this);
        }
        outANumberExpression(node);
    }

    public void inANumberUnitExpression(ANumberUnitExpression node)
    {
        defaultIn(node);
    }

    public void outANumberUnitExpression(ANumberUnitExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberUnitExpression(ANumberUnitExpression node)
    {
        inANumberUnitExpression(node);
        if(node.getUnit() != null)
        {
            node.getUnit().apply(this);
        }
        if(node.getNumberLiteral() != null)
        {
            node.getNumberLiteral().apply(this);
        }
        outANumberUnitExpression(node);
    }

    public void inAColorExpression(AColorExpression node)
    {
        defaultIn(node);
    }

    public void outAColorExpression(AColorExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColorExpression(AColorExpression node)
    {
        inAColorExpression(node);
        if(node.getColor() != null)
        {
            node.getColor().apply(this);
        }
        outAColorExpression(node);
    }

    public void inAStringExpression(AStringExpression node)
    {
        defaultIn(node);
    }

    public void outAStringExpression(AStringExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringExpression(AStringExpression node)
    {
        inAStringExpression(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringExpression(node);
    }

    public void inANullExpression(ANullExpression node)
    {
        defaultIn(node);
    }

    public void outANullExpression(ANullExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullExpression(ANullExpression node)
    {
        inANullExpression(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outANullExpression(node);
    }

    public void inAUrlExpression(AUrlExpression node)
    {
        defaultIn(node);
    }

    public void outAUrlExpression(AUrlExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUrlExpression(AUrlExpression node)
    {
        inAUrlExpression(node);
        if(node.getUrl() != null)
        {
            node.getUrl().apply(this);
        }
        outAUrlExpression(node);
    }

    public void inAVariableNameExpression(AVariableNameExpression node)
    {
        defaultIn(node);
    }

    public void outAVariableNameExpression(AVariableNameExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableNameExpression(AVariableNameExpression node)
    {
        inAVariableNameExpression(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outAVariableNameExpression(node);
    }

    public void inAFunctionCallExpression(AFunctionCallExpression node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallExpression(AFunctionCallExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallExpression(AFunctionCallExpression node)
    {
        inAFunctionCallExpression(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getConditions() != null)
        {
            node.getConditions().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFunctionCallExpression(node);
    }

    public void inACommandStatementExpression(ACommandStatementExpression node)
    {
        defaultIn(node);
    }

    public void outACommandStatementExpression(ACommandStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommandStatementExpression(ACommandStatementExpression node)
    {
        inACommandStatementExpression(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getConditions() != null)
        {
            node.getConditions().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        outACommandStatementExpression(node);
    }
}
