/* This file was generated by SableCC (http://www.sablecc.org/). */

package scss.analysis;

import java.util.*;
import scss.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStylesheet(AStylesheet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARulesetStatement(ARulesetStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMixinStatement(AMixinStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionStatement(AFunctionStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableStatement(AVariableStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIncludeSimpleStatement(AIncludeSimpleStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForStatement(AForStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEachStatement(AEachStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentsEachValues(AIdentsEachValues node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListEachValues(AListEachValues node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMapEachValues(AMapEachValues node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACommaIdent(ACommaIdent node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListValues(AListValues node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACommaExpression(ACommaExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMapValues(AMapValues node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACommaKeyValue(ACommaKeyValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAKeyValue(AKeyValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACommaVariable(ACommaVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleIdentifierValue(ASimpleIdentifierValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAColonIdentifierValue(AColonIdentifierValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseIfStatement(AElseIfStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseStatement(AElseStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParams(AParams node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWithCommaParam(AWithCommaParam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleParam(ASimpleParam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParamOptionalValue(AParamOptionalValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPropertyContentInBlock(APropertyContentInBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatementContentInBlock(AStatementContentInBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASelectors(ASelectors node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtPrefixElement(AGtPrefixElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusPrefixElement(APlusPrefixElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATilPrefixElement(ATilPrefixElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACommaPrefixElement(ACommaPrefixElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimplePrefixElement(ASimplePrefixElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHashElement(AHashElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADotElement(ADotElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleElement(ASimpleElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentSimpleElement(AIdentSimpleElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndSimpleElement(AAndSimpleElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStarSimpleElement(AStarSimpleElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqAttrib(AEqAttrib node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPipeEqAttrib(APipeEqAttrib node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATildEqAttrib(ATildEqAttrib node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProperty(AProperty node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleIdent(ASimpleIdent node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInterpolationIdent(AInterpolationIdent node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionCallFunctionCall(AFunctionCallFunctionCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValues(AValues node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACommaConditions(ACommaConditions node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionBody(AFunctionBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionReturn(AFunctionReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArithFunctionStatement(AArithFunctionStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOtherStatementFunctionStatement(AOtherStatementFunctionStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndConditions(AAndConditions node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleConditions(ASimpleConditions node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrCondition(AOrCondition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleCondition(ASimpleCondition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqComparison(AEqComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANeqComparison(ANeqComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtComparison(ALtComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtComparison(AGtComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleComparison(ASimpleComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusArith(AMinusArith node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusArith(APlusArith node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleArith(ASimpleArith node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATimesFactor(ATimesFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleFactor(ASimpleFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberExpression(ANumberExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberUnitExpression(ANumberUnitExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAColorExpression(AColorExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringExpression(AStringExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANullExpression(ANullExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUrlExpression(AUrlExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableNameExpression(AVariableNameExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionCallExpression(AFunctionCallExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACommandStatementExpression(ACommandStatementExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNull(TNull node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDefault(TDefault node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnit(TUnit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEllipsis(TEllipsis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLparen(TLparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRparen(TRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlockstart(TBlockstart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlockend(TBlockend node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLbrack(TLbrack node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRbrack(TRbrack node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTil(TTil node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDollar(TDollar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAt(TAt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoubleAnd(TDoubleAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTHash(THash node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColoncolon(TColoncolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTimes(TTimes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPerc(TPerc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqeq(TEqeq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNoteq(TNoteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPipeEq(TPipeEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTildEq(TTildEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMixin(TMixin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFunction(TFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtElse(TAtElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtIf(TAtIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtFor(TAtFor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtWhile(TAtWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtEach(TAtEach node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInclude(TInclude node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTImport(TImport node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThrough(TThrough node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPoundDefault(TPoundDefault node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVariable(TVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumberLiteral(TNumberLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColor(TColor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUrl(TUrl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
