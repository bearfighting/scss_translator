/* This file was generated by SableCC (http://www.sablecc.org/). */

package scss.node;

import scss.analysis.*;

@SuppressWarnings("nls")
public final class AColonIdentifierValue extends PIdentifierValue
{
    private PIdent _ident_;
    private TColon _colon_;
    private PValues _values_;

    public AColonIdentifierValue()
    {
        // Constructor
    }

    public AColonIdentifierValue(
        @SuppressWarnings("hiding") PIdent _ident_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PValues _values_)
    {
        // Constructor
        setIdent(_ident_);

        setColon(_colon_);

        setValues(_values_);

    }

    @Override
    public Object clone()
    {
        return new AColonIdentifierValue(
            cloneNode(this._ident_),
            cloneNode(this._colon_),
            cloneNode(this._values_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAColonIdentifierValue(this);
    }

    public PIdent getIdent()
    {
        return this._ident_;
    }

    public void setIdent(PIdent node)
    {
        if(this._ident_ != null)
        {
            this._ident_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ident_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PValues getValues()
    {
        return this._values_;
    }

    public void setValues(PValues node)
    {
        if(this._values_ != null)
        {
            this._values_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._values_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ident_)
            + toString(this._colon_)
            + toString(this._values_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ident_ == child)
        {
            this._ident_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._values_ == child)
        {
            this._values_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ident_ == oldChild)
        {
            setIdent((PIdent) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._values_ == oldChild)
        {
            setValues((PValues) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
