/* This file was generated by SableCC (http://www.sablecc.org/). */

package scss.node;

import java.util.*;
import scss.analysis.*;

@SuppressWarnings("nls")
public final class AFunctionBody extends PFunctionBody
{
    private final LinkedList<PFunctionStatement> _functionStatement_ = new LinkedList<PFunctionStatement>();
    private PFunctionReturn _functionReturn_;

    public AFunctionBody()
    {
        // Constructor
    }

    public AFunctionBody(
        @SuppressWarnings("hiding") List<?> _functionStatement_,
        @SuppressWarnings("hiding") PFunctionReturn _functionReturn_)
    {
        // Constructor
        setFunctionStatement(_functionStatement_);

        setFunctionReturn(_functionReturn_);

    }

    @Override
    public Object clone()
    {
        return new AFunctionBody(
            cloneList(this._functionStatement_),
            cloneNode(this._functionReturn_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunctionBody(this);
    }

    public LinkedList<PFunctionStatement> getFunctionStatement()
    {
        return this._functionStatement_;
    }

    public void setFunctionStatement(List<?> list)
    {
        for(PFunctionStatement e : this._functionStatement_)
        {
            e.parent(null);
        }
        this._functionStatement_.clear();

        for(Object obj_e : list)
        {
            PFunctionStatement e = (PFunctionStatement) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._functionStatement_.add(e);
        }
    }

    public PFunctionReturn getFunctionReturn()
    {
        return this._functionReturn_;
    }

    public void setFunctionReturn(PFunctionReturn node)
    {
        if(this._functionReturn_ != null)
        {
            this._functionReturn_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._functionReturn_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._functionStatement_)
            + toString(this._functionReturn_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._functionStatement_.remove(child))
        {
            return;
        }

        if(this._functionReturn_ == child)
        {
            this._functionReturn_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PFunctionStatement> i = this._functionStatement_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFunctionStatement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._functionReturn_ == oldChild)
        {
            setFunctionReturn((PFunctionReturn) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
