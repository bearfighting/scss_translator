/* This file was generated by SableCC (http://www.sablecc.org/). */

package scss.node;

import scss.analysis.*;

@SuppressWarnings("nls")
public final class ACommaKeyValue extends PCommaKeyValue
{
    private TComma _comma_;
    private PKeyValue _keyValue_;

    public ACommaKeyValue()
    {
        // Constructor
    }

    public ACommaKeyValue(
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PKeyValue _keyValue_)
    {
        // Constructor
        setComma(_comma_);

        setKeyValue(_keyValue_);

    }

    @Override
    public Object clone()
    {
        return new ACommaKeyValue(
            cloneNode(this._comma_),
            cloneNode(this._keyValue_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACommaKeyValue(this);
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PKeyValue getKeyValue()
    {
        return this._keyValue_;
    }

    public void setKeyValue(PKeyValue node)
    {
        if(this._keyValue_ != null)
        {
            this._keyValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keyValue_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._comma_)
            + toString(this._keyValue_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._keyValue_ == child)
        {
            this._keyValue_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._keyValue_ == oldChild)
        {
            setKeyValue((PKeyValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
