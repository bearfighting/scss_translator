/* This file was generated by SableCC (http://www.sablecc.org/). */

package scss.node;

import java.util.*;
import scss.analysis.*;

@SuppressWarnings("nls")
public final class AValues extends PValues
{
    private PConditions _first_;
    private final LinkedList<PCommaConditions> _rest_ = new LinkedList<PCommaConditions>();

    public AValues()
    {
        // Constructor
    }

    public AValues(
        @SuppressWarnings("hiding") PConditions _first_,
        @SuppressWarnings("hiding") List<?> _rest_)
    {
        // Constructor
        setFirst(_first_);

        setRest(_rest_);

    }

    @Override
    public Object clone()
    {
        return new AValues(
            cloneNode(this._first_),
            cloneList(this._rest_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAValues(this);
    }

    public PConditions getFirst()
    {
        return this._first_;
    }

    public void setFirst(PConditions node)
    {
        if(this._first_ != null)
        {
            this._first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._first_ = node;
    }

    public LinkedList<PCommaConditions> getRest()
    {
        return this._rest_;
    }

    public void setRest(List<?> list)
    {
        for(PCommaConditions e : this._rest_)
        {
            e.parent(null);
        }
        this._rest_.clear();

        for(Object obj_e : list)
        {
            PCommaConditions e = (PCommaConditions) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._rest_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._first_)
            + toString(this._rest_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._first_ == child)
        {
            this._first_ = null;
            return;
        }

        if(this._rest_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._first_ == oldChild)
        {
            setFirst((PConditions) newChild);
            return;
        }

        for(ListIterator<PCommaConditions> i = this._rest_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PCommaConditions) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
