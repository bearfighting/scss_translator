/* This file was generated by SableCC (http://www.sablecc.org/). */

package scss.node;

import scss.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleConditions extends PConditions
{
    private PCondition _conditions_;

    public ASimpleConditions()
    {
        // Constructor
    }

    public ASimpleConditions(
        @SuppressWarnings("hiding") PCondition _conditions_)
    {
        // Constructor
        setConditions(_conditions_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleConditions(
            cloneNode(this._conditions_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleConditions(this);
    }

    public PCondition getConditions()
    {
        return this._conditions_;
    }

    public void setConditions(PCondition node)
    {
        if(this._conditions_ != null)
        {
            this._conditions_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditions_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditions_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditions_ == child)
        {
            this._conditions_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conditions_ == oldChild)
        {
            setConditions((PCondition) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
