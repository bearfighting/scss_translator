/* This file was generated by SableCC (http://www.sablecc.org/). */

package scss.node;

import scss.analysis.*;

@SuppressWarnings("nls")
public final class ATildEqAttrib extends PAttrib
{
    private TLbrack _lbrack_;
    private TIdentifier _identifier_;
    private TTildEq _tildEq_;
    private TStringLiteral _stringLiteral_;
    private TRbrack _rbrack_;

    public ATildEqAttrib()
    {
        // Constructor
    }

    public ATildEqAttrib(
        @SuppressWarnings("hiding") TLbrack _lbrack_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TTildEq _tildEq_,
        @SuppressWarnings("hiding") TStringLiteral _stringLiteral_,
        @SuppressWarnings("hiding") TRbrack _rbrack_)
    {
        // Constructor
        setLbrack(_lbrack_);

        setIdentifier(_identifier_);

        setTildEq(_tildEq_);

        setStringLiteral(_stringLiteral_);

        setRbrack(_rbrack_);

    }

    @Override
    public Object clone()
    {
        return new ATildEqAttrib(
            cloneNode(this._lbrack_),
            cloneNode(this._identifier_),
            cloneNode(this._tildEq_),
            cloneNode(this._stringLiteral_),
            cloneNode(this._rbrack_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATildEqAttrib(this);
    }

    public TLbrack getLbrack()
    {
        return this._lbrack_;
    }

    public void setLbrack(TLbrack node)
    {
        if(this._lbrack_ != null)
        {
            this._lbrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lbrack_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TTildEq getTildEq()
    {
        return this._tildEq_;
    }

    public void setTildEq(TTildEq node)
    {
        if(this._tildEq_ != null)
        {
            this._tildEq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tildEq_ = node;
    }

    public TStringLiteral getStringLiteral()
    {
        return this._stringLiteral_;
    }

    public void setStringLiteral(TStringLiteral node)
    {
        if(this._stringLiteral_ != null)
        {
            this._stringLiteral_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stringLiteral_ = node;
    }

    public TRbrack getRbrack()
    {
        return this._rbrack_;
    }

    public void setRbrack(TRbrack node)
    {
        if(this._rbrack_ != null)
        {
            this._rbrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rbrack_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lbrack_)
            + toString(this._identifier_)
            + toString(this._tildEq_)
            + toString(this._stringLiteral_)
            + toString(this._rbrack_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lbrack_ == child)
        {
            this._lbrack_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._tildEq_ == child)
        {
            this._tildEq_ = null;
            return;
        }

        if(this._stringLiteral_ == child)
        {
            this._stringLiteral_ = null;
            return;
        }

        if(this._rbrack_ == child)
        {
            this._rbrack_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lbrack_ == oldChild)
        {
            setLbrack((TLbrack) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._tildEq_ == oldChild)
        {
            setTildEq((TTildEq) newChild);
            return;
        }

        if(this._stringLiteral_ == oldChild)
        {
            setStringLiteral((TStringLiteral) newChild);
            return;
        }

        if(this._rbrack_ == oldChild)
        {
            setRbrack((TRbrack) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
