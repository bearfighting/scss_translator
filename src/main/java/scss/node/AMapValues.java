/* This file was generated by SableCC (http://www.sablecc.org/). */

package scss.node;

import java.util.*;
import scss.analysis.*;

@SuppressWarnings("nls")
public final class AMapValues extends PMapValues
{
    private TLparen _lparen_;
    private PKeyValue _keyValue_;
    private final LinkedList<PCommaKeyValue> _commaKeyValue_ = new LinkedList<PCommaKeyValue>();
    private TRparen _rparen_;

    public AMapValues()
    {
        // Constructor
    }

    public AMapValues(
        @SuppressWarnings("hiding") TLparen _lparen_,
        @SuppressWarnings("hiding") PKeyValue _keyValue_,
        @SuppressWarnings("hiding") List<?> _commaKeyValue_,
        @SuppressWarnings("hiding") TRparen _rparen_)
    {
        // Constructor
        setLparen(_lparen_);

        setKeyValue(_keyValue_);

        setCommaKeyValue(_commaKeyValue_);

        setRparen(_rparen_);

    }

    @Override
    public Object clone()
    {
        return new AMapValues(
            cloneNode(this._lparen_),
            cloneNode(this._keyValue_),
            cloneList(this._commaKeyValue_),
            cloneNode(this._rparen_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMapValues(this);
    }

    public TLparen getLparen()
    {
        return this._lparen_;
    }

    public void setLparen(TLparen node)
    {
        if(this._lparen_ != null)
        {
            this._lparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lparen_ = node;
    }

    public PKeyValue getKeyValue()
    {
        return this._keyValue_;
    }

    public void setKeyValue(PKeyValue node)
    {
        if(this._keyValue_ != null)
        {
            this._keyValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keyValue_ = node;
    }

    public LinkedList<PCommaKeyValue> getCommaKeyValue()
    {
        return this._commaKeyValue_;
    }

    public void setCommaKeyValue(List<?> list)
    {
        for(PCommaKeyValue e : this._commaKeyValue_)
        {
            e.parent(null);
        }
        this._commaKeyValue_.clear();

        for(Object obj_e : list)
        {
            PCommaKeyValue e = (PCommaKeyValue) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._commaKeyValue_.add(e);
        }
    }

    public TRparen getRparen()
    {
        return this._rparen_;
    }

    public void setRparen(TRparen node)
    {
        if(this._rparen_ != null)
        {
            this._rparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rparen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lparen_)
            + toString(this._keyValue_)
            + toString(this._commaKeyValue_)
            + toString(this._rparen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lparen_ == child)
        {
            this._lparen_ = null;
            return;
        }

        if(this._keyValue_ == child)
        {
            this._keyValue_ = null;
            return;
        }

        if(this._commaKeyValue_.remove(child))
        {
            return;
        }

        if(this._rparen_ == child)
        {
            this._rparen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lparen_ == oldChild)
        {
            setLparen((TLparen) newChild);
            return;
        }

        if(this._keyValue_ == oldChild)
        {
            setKeyValue((PKeyValue) newChild);
            return;
        }

        for(ListIterator<PCommaKeyValue> i = this._commaKeyValue_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PCommaKeyValue) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rparen_ == oldChild)
        {
            setRparen((TRparen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
