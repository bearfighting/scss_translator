/* This file was generated by SableCC (http://www.sablecc.org/). */

package scss.node;

import java.util.*;
import scss.analysis.*;

@SuppressWarnings("nls")
public final class AIfStatement extends PStatement
{
    private TAtIf _atIf_;
    private PConditions _conditions_;
    private PBlock _block_;
    private final LinkedList<PElseIfStatement> _elseIfStatement_ = new LinkedList<PElseIfStatement>();
    private PElseStatement _elseStatement_;

    public AIfStatement()
    {
        // Constructor
    }

    public AIfStatement(
        @SuppressWarnings("hiding") TAtIf _atIf_,
        @SuppressWarnings("hiding") PConditions _conditions_,
        @SuppressWarnings("hiding") PBlock _block_,
        @SuppressWarnings("hiding") List<?> _elseIfStatement_,
        @SuppressWarnings("hiding") PElseStatement _elseStatement_)
    {
        // Constructor
        setAtIf(_atIf_);

        setConditions(_conditions_);

        setBlock(_block_);

        setElseIfStatement(_elseIfStatement_);

        setElseStatement(_elseStatement_);

    }

    @Override
    public Object clone()
    {
        return new AIfStatement(
            cloneNode(this._atIf_),
            cloneNode(this._conditions_),
            cloneNode(this._block_),
            cloneList(this._elseIfStatement_),
            cloneNode(this._elseStatement_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfStatement(this);
    }

    public TAtIf getAtIf()
    {
        return this._atIf_;
    }

    public void setAtIf(TAtIf node)
    {
        if(this._atIf_ != null)
        {
            this._atIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._atIf_ = node;
    }

    public PConditions getConditions()
    {
        return this._conditions_;
    }

    public void setConditions(PConditions node)
    {
        if(this._conditions_ != null)
        {
            this._conditions_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditions_ = node;
    }

    public PBlock getBlock()
    {
        return this._block_;
    }

    public void setBlock(PBlock node)
    {
        if(this._block_ != null)
        {
            this._block_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._block_ = node;
    }

    public LinkedList<PElseIfStatement> getElseIfStatement()
    {
        return this._elseIfStatement_;
    }

    public void setElseIfStatement(List<?> list)
    {
        for(PElseIfStatement e : this._elseIfStatement_)
        {
            e.parent(null);
        }
        this._elseIfStatement_.clear();

        for(Object obj_e : list)
        {
            PElseIfStatement e = (PElseIfStatement) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._elseIfStatement_.add(e);
        }
    }

    public PElseStatement getElseStatement()
    {
        return this._elseStatement_;
    }

    public void setElseStatement(PElseStatement node)
    {
        if(this._elseStatement_ != null)
        {
            this._elseStatement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseStatement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._atIf_)
            + toString(this._conditions_)
            + toString(this._block_)
            + toString(this._elseIfStatement_)
            + toString(this._elseStatement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._atIf_ == child)
        {
            this._atIf_ = null;
            return;
        }

        if(this._conditions_ == child)
        {
            this._conditions_ = null;
            return;
        }

        if(this._block_ == child)
        {
            this._block_ = null;
            return;
        }

        if(this._elseIfStatement_.remove(child))
        {
            return;
        }

        if(this._elseStatement_ == child)
        {
            this._elseStatement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._atIf_ == oldChild)
        {
            setAtIf((TAtIf) newChild);
            return;
        }

        if(this._conditions_ == oldChild)
        {
            setConditions((PConditions) newChild);
            return;
        }

        if(this._block_ == oldChild)
        {
            setBlock((PBlock) newChild);
            return;
        }

        for(ListIterator<PElseIfStatement> i = this._elseIfStatement_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PElseIfStatement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._elseStatement_ == oldChild)
        {
            setElseStatement((PElseStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
