/* This file was generated by SableCC (http://www.sablecc.org/). */

package scss.node;

import java.util.*;
import scss.analysis.*;

@SuppressWarnings("nls")
public final class ABlock extends PBlock
{
    private TBlockstart _blockstart_;
    private final LinkedList<PContentInBlock> _contentInBlock_ = new LinkedList<PContentInBlock>();
    private TBlockend _blockend_;

    public ABlock()
    {
        // Constructor
    }

    public ABlock(
        @SuppressWarnings("hiding") TBlockstart _blockstart_,
        @SuppressWarnings("hiding") List<?> _contentInBlock_,
        @SuppressWarnings("hiding") TBlockend _blockend_)
    {
        // Constructor
        setBlockstart(_blockstart_);

        setContentInBlock(_contentInBlock_);

        setBlockend(_blockend_);

    }

    @Override
    public Object clone()
    {
        return new ABlock(
            cloneNode(this._blockstart_),
            cloneList(this._contentInBlock_),
            cloneNode(this._blockend_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABlock(this);
    }

    public TBlockstart getBlockstart()
    {
        return this._blockstart_;
    }

    public void setBlockstart(TBlockstart node)
    {
        if(this._blockstart_ != null)
        {
            this._blockstart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._blockstart_ = node;
    }

    public LinkedList<PContentInBlock> getContentInBlock()
    {
        return this._contentInBlock_;
    }

    public void setContentInBlock(List<?> list)
    {
        for(PContentInBlock e : this._contentInBlock_)
        {
            e.parent(null);
        }
        this._contentInBlock_.clear();

        for(Object obj_e : list)
        {
            PContentInBlock e = (PContentInBlock) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._contentInBlock_.add(e);
        }
    }

    public TBlockend getBlockend()
    {
        return this._blockend_;
    }

    public void setBlockend(TBlockend node)
    {
        if(this._blockend_ != null)
        {
            this._blockend_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._blockend_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._blockstart_)
            + toString(this._contentInBlock_)
            + toString(this._blockend_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._blockstart_ == child)
        {
            this._blockstart_ = null;
            return;
        }

        if(this._contentInBlock_.remove(child))
        {
            return;
        }

        if(this._blockend_ == child)
        {
            this._blockend_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._blockstart_ == oldChild)
        {
            setBlockstart((TBlockstart) newChild);
            return;
        }

        for(ListIterator<PContentInBlock> i = this._contentInBlock_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PContentInBlock) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._blockend_ == oldChild)
        {
            setBlockend((TBlockend) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
