/* This file was generated by SableCC (http://www.sablecc.org/). */

package scss.node;

import scss.analysis.*;

@SuppressWarnings("nls")
public final class AMixinStatement extends PStatement
{
    private TMixin _mixin_;
    private PIdent _ident_;
    private PParams _params_;
    private PBlock _block_;

    public AMixinStatement()
    {
        // Constructor
    }

    public AMixinStatement(
        @SuppressWarnings("hiding") TMixin _mixin_,
        @SuppressWarnings("hiding") PIdent _ident_,
        @SuppressWarnings("hiding") PParams _params_,
        @SuppressWarnings("hiding") PBlock _block_)
    {
        // Constructor
        setMixin(_mixin_);

        setIdent(_ident_);

        setParams(_params_);

        setBlock(_block_);

    }

    @Override
    public Object clone()
    {
        return new AMixinStatement(
            cloneNode(this._mixin_),
            cloneNode(this._ident_),
            cloneNode(this._params_),
            cloneNode(this._block_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMixinStatement(this);
    }

    public TMixin getMixin()
    {
        return this._mixin_;
    }

    public void setMixin(TMixin node)
    {
        if(this._mixin_ != null)
        {
            this._mixin_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mixin_ = node;
    }

    public PIdent getIdent()
    {
        return this._ident_;
    }

    public void setIdent(PIdent node)
    {
        if(this._ident_ != null)
        {
            this._ident_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ident_ = node;
    }

    public PParams getParams()
    {
        return this._params_;
    }

    public void setParams(PParams node)
    {
        if(this._params_ != null)
        {
            this._params_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._params_ = node;
    }

    public PBlock getBlock()
    {
        return this._block_;
    }

    public void setBlock(PBlock node)
    {
        if(this._block_ != null)
        {
            this._block_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._block_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._mixin_)
            + toString(this._ident_)
            + toString(this._params_)
            + toString(this._block_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._mixin_ == child)
        {
            this._mixin_ = null;
            return;
        }

        if(this._ident_ == child)
        {
            this._ident_ = null;
            return;
        }

        if(this._params_ == child)
        {
            this._params_ = null;
            return;
        }

        if(this._block_ == child)
        {
            this._block_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._mixin_ == oldChild)
        {
            setMixin((TMixin) newChild);
            return;
        }

        if(this._ident_ == oldChild)
        {
            setIdent((PIdent) newChild);
            return;
        }

        if(this._params_ == oldChild)
        {
            setParams((PParams) newChild);
            return;
        }

        if(this._block_ == oldChild)
        {
            setBlock((PBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
