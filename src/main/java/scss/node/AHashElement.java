/* This file was generated by SableCC (http://www.sablecc.org/). */

package scss.node;

import scss.analysis.*;

@SuppressWarnings("nls")
public final class AHashElement extends PElement
{
    private THash _hash_;
    private PElement _element_;

    public AHashElement()
    {
        // Constructor
    }

    public AHashElement(
        @SuppressWarnings("hiding") THash _hash_,
        @SuppressWarnings("hiding") PElement _element_)
    {
        // Constructor
        setHash(_hash_);

        setElement(_element_);

    }

    @Override
    public Object clone()
    {
        return new AHashElement(
            cloneNode(this._hash_),
            cloneNode(this._element_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAHashElement(this);
    }

    public THash getHash()
    {
        return this._hash_;
    }

    public void setHash(THash node)
    {
        if(this._hash_ != null)
        {
            this._hash_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._hash_ = node;
    }

    public PElement getElement()
    {
        return this._element_;
    }

    public void setElement(PElement node)
    {
        if(this._element_ != null)
        {
            this._element_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._element_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._hash_)
            + toString(this._element_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._hash_ == child)
        {
            this._hash_ = null;
            return;
        }

        if(this._element_ == child)
        {
            this._element_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._hash_ == oldChild)
        {
            setHash((THash) newChild);
            return;
        }

        if(this._element_ == oldChild)
        {
            setElement((PElement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
