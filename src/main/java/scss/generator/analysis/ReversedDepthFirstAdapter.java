/* This file was generated by SableCC (http://www.sablecc.org/). */

package scss.generator.analysis;

import java.util.*;
import scss.generator.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStylesheet().apply(this);
        outStart(node);
    }

    public void inAStylesheet(AStylesheet node)
    {
        defaultIn(node);
    }

    public void outAStylesheet(AStylesheet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStylesheet(AStylesheet node)
    {
        inAStylesheet(node);
        {
            List<PRuleset> copy = new ArrayList<PRuleset>(node.getRuleset());
            Collections.reverse(copy);
            for(PRuleset e : copy)
            {
                e.apply(this);
            }
        }
        outAStylesheet(node);
    }

    public void inARuleRuleset(ARuleRuleset node)
    {
        defaultIn(node);
    }

    public void outARuleRuleset(ARuleRuleset node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARuleRuleset(ARuleRuleset node)
    {
        inARuleRuleset(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outARuleRuleset(node);
    }

    public void inAPropertyRuleset(APropertyRuleset node)
    {
        defaultIn(node);
    }

    public void outAPropertyRuleset(APropertyRuleset node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPropertyRuleset(APropertyRuleset node)
    {
        inAPropertyRuleset(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        {
            List<TIdentifier> copy = new ArrayList<TIdentifier>(node.getSecond());
            Collections.reverse(copy);
            for(TIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAPropertyRuleset(node);
    }

    public void inABlock(ABlock node)
    {
        defaultIn(node);
    }

    public void outABlock(ABlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        inABlock(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            List<PRuleset> copy = new ArrayList<PRuleset>(node.getRuleset());
            Collections.reverse(copy);
            for(PRuleset e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        outABlock(node);
    }
}
