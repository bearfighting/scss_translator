/* This file was generated by SableCC (http://www.sablecc.org/). */

package scss.parser;

import scss.lexer.*;
import scss.node.*;
import scss.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStylesheet node1 = (PStylesheet) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAstylesheet1Stylesheet */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAstylesheet2Stylesheet */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce ARulesetStatement */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAmixinstatement1Statement */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AAmixinstatement2Statement */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AAfunctionstatement1Statement */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list, false);
            }
            break;
            case 6: /* reduce AAfunctionstatement2Statement */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list, false);
            }
            break;
            case 7: /* reduce AAvariablestatement1Statement */
            {
                ArrayList<Object> list = new7();
                push(goTo(1), list, false);
            }
            break;
            case 8: /* reduce AAvariablestatement2Statement */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list, false);
            }
            break;
            case 9: /* reduce AIncludeSimpleStatement */
            {
                ArrayList<Object> list = new9();
                push(goTo(1), list, false);
            }
            break;
            case 10: /* reduce AAifstatement1Statement */
            {
                ArrayList<Object> list = new10();
                push(goTo(1), list, false);
            }
            break;
            case 11: /* reduce AAifstatement2Statement */
            {
                ArrayList<Object> list = new11();
                push(goTo(1), list, false);
            }
            break;
            case 12: /* reduce AAifstatement3Statement */
            {
                ArrayList<Object> list = new12();
                push(goTo(1), list, false);
            }
            break;
            case 13: /* reduce AAifstatement4Statement */
            {
                ArrayList<Object> list = new13();
                push(goTo(1), list, false);
            }
            break;
            case 14: /* reduce AForStatement */
            {
                ArrayList<Object> list = new14();
                push(goTo(1), list, false);
            }
            break;
            case 15: /* reduce AWhileStatement */
            {
                ArrayList<Object> list = new15();
                push(goTo(1), list, false);
            }
            break;
            case 16: /* reduce AAeachstatement1Statement */
            {
                ArrayList<Object> list = new16();
                push(goTo(1), list, false);
            }
            break;
            case 17: /* reduce AAeachstatement2Statement */
            {
                ArrayList<Object> list = new17();
                push(goTo(1), list, false);
            }
            break;
            case 18: /* reduce AAidentseachvalues1EachValues */
            {
                ArrayList<Object> list = new18();
                push(goTo(2), list, false);
            }
            break;
            case 19: /* reduce AAidentseachvalues2EachValues */
            {
                ArrayList<Object> list = new19();
                push(goTo(2), list, false);
            }
            break;
            case 20: /* reduce AListEachValues */
            {
                ArrayList<Object> list = new20();
                push(goTo(2), list, false);
            }
            break;
            case 21: /* reduce AMapEachValues */
            {
                ArrayList<Object> list = new21();
                push(goTo(2), list, false);
            }
            break;
            case 22: /* reduce ACommaIdent */
            {
                ArrayList<Object> list = new22();
                push(goTo(3), list, false);
            }
            break;
            case 23: /* reduce AAlistvalues1ListValues */
            {
                ArrayList<Object> list = new23();
                push(goTo(4), list, false);
            }
            break;
            case 24: /* reduce AAlistvalues2ListValues */
            {
                ArrayList<Object> list = new24();
                push(goTo(4), list, false);
            }
            break;
            case 25: /* reduce ACommaExpression */
            {
                ArrayList<Object> list = new25();
                push(goTo(5), list, false);
            }
            break;
            case 26: /* reduce AAmapvalues1MapValues */
            {
                ArrayList<Object> list = new26();
                push(goTo(6), list, false);
            }
            break;
            case 27: /* reduce AAmapvalues2MapValues */
            {
                ArrayList<Object> list = new27();
                push(goTo(6), list, false);
            }
            break;
            case 28: /* reduce ACommaKeyValue */
            {
                ArrayList<Object> list = new28();
                push(goTo(7), list, false);
            }
            break;
            case 29: /* reduce AKeyValue */
            {
                ArrayList<Object> list = new29();
                push(goTo(8), list, false);
            }
            break;
            case 30: /* reduce ACommaVariable */
            {
                ArrayList<Object> list = new30();
                push(goTo(9), list, false);
            }
            break;
            case 31: /* reduce ASimpleIdentifierValue */
            {
                ArrayList<Object> list = new31();
                push(goTo(10), list, false);
            }
            break;
            case 32: /* reduce AColonIdentifierValue */
            {
                ArrayList<Object> list = new32();
                push(goTo(10), list, false);
            }
            break;
            case 33: /* reduce AElseIfStatement */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list, false);
            }
            break;
            case 34: /* reduce AElseStatement */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list, false);
            }
            break;
            case 35: /* reduce AAparams1Params */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list, false);
            }
            break;
            case 36: /* reduce AAparams2Params */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list, false);
            }
            break;
            case 37: /* reduce AWithCommaParam */
            {
                ArrayList<Object> list = new37();
                push(goTo(14), list, false);
            }
            break;
            case 38: /* reduce ASimpleParam */
            {
                ArrayList<Object> list = new38();
                push(goTo(14), list, false);
            }
            break;
            case 39: /* reduce AAparamoptionalvalue1ParamOptionalValue */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list, false);
            }
            break;
            case 40: /* reduce AAparamoptionalvalue2ParamOptionalValue */
            {
                ArrayList<Object> list = new40();
                push(goTo(15), list, false);
            }
            break;
            case 41: /* reduce AAblock1Block */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list, false);
            }
            break;
            case 42: /* reduce AAblock2Block */
            {
                ArrayList<Object> list = new42();
                push(goTo(16), list, false);
            }
            break;
            case 43: /* reduce APropertyContentInBlock */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list, false);
            }
            break;
            case 44: /* reduce AStatementContentInBlock */
            {
                ArrayList<Object> list = new44();
                push(goTo(17), list, false);
            }
            break;
            case 45: /* reduce AAselectors1Selectors */
            {
                ArrayList<Object> list = new45();
                push(goTo(18), list, false);
            }
            break;
            case 46: /* reduce AAselectors2Selectors */
            {
                ArrayList<Object> list = new46();
                push(goTo(18), list, false);
            }
            break;
            case 47: /* reduce AAselectors3Selectors */
            {
                ArrayList<Object> list = new47();
                push(goTo(18), list, false);
            }
            break;
            case 48: /* reduce AAselectors4Selectors */
            {
                ArrayList<Object> list = new48();
                push(goTo(18), list, false);
            }
            break;
            case 49: /* reduce AGtPrefixElement */
            {
                ArrayList<Object> list = new49();
                push(goTo(19), list, false);
            }
            break;
            case 50: /* reduce APlusPrefixElement */
            {
                ArrayList<Object> list = new50();
                push(goTo(19), list, false);
            }
            break;
            case 51: /* reduce ATilPrefixElement */
            {
                ArrayList<Object> list = new51();
                push(goTo(19), list, false);
            }
            break;
            case 52: /* reduce ACommaPrefixElement */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list, false);
            }
            break;
            case 53: /* reduce ASimplePrefixElement */
            {
                ArrayList<Object> list = new53();
                push(goTo(19), list, false);
            }
            break;
            case 54: /* reduce AHashElement */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list, false);
            }
            break;
            case 55: /* reduce ADotElement */
            {
                ArrayList<Object> list = new55();
                push(goTo(20), list, false);
            }
            break;
            case 56: /* reduce ASimpleElement */
            {
                ArrayList<Object> list = new56();
                push(goTo(20), list, false);
            }
            break;
            case 57: /* reduce AIdentSimpleElement */
            {
                ArrayList<Object> list = new57();
                push(goTo(21), list, false);
            }
            break;
            case 58: /* reduce AAndSimpleElement */
            {
                ArrayList<Object> list = new58();
                push(goTo(21), list, false);
            }
            break;
            case 59: /* reduce AStarSimpleElement */
            {
                ArrayList<Object> list = new59();
                push(goTo(21), list, false);
            }
            break;
            case 60: /* reduce AEqAttrib */
            {
                ArrayList<Object> list = new60();
                push(goTo(22), list, false);
            }
            break;
            case 61: /* reduce APipeEqAttrib */
            {
                ArrayList<Object> list = new61();
                push(goTo(22), list, false);
            }
            break;
            case 62: /* reduce ATildEqAttrib */
            {
                ArrayList<Object> list = new62();
                push(goTo(22), list, false);
            }
            break;
            case 63: /* reduce AProperty */
            {
                ArrayList<Object> list = new63();
                push(goTo(23), list, false);
            }
            break;
            case 64: /* reduce ASimpleIdent */
            {
                ArrayList<Object> list = new64();
                push(goTo(24), list, false);
            }
            break;
            case 65: /* reduce AInterpolationIdent */
            {
                ArrayList<Object> list = new65();
                push(goTo(24), list, false);
            }
            break;
            case 66: /* reduce AAfunctioncallfunctioncall1FunctionCall */
            {
                ArrayList<Object> list = new66();
                push(goTo(25), list, false);
            }
            break;
            case 67: /* reduce AAfunctioncallfunctioncall2FunctionCall */
            {
                ArrayList<Object> list = new67();
                push(goTo(25), list, false);
            }
            break;
            case 68: /* reduce AAvalues1Values */
            {
                ArrayList<Object> list = new68();
                push(goTo(26), list, false);
            }
            break;
            case 69: /* reduce AAvalues2Values */
            {
                ArrayList<Object> list = new69();
                push(goTo(26), list, false);
            }
            break;
            case 70: /* reduce ACommaConditions */
            {
                ArrayList<Object> list = new70();
                push(goTo(27), list, false);
            }
            break;
            case 71: /* reduce AAfunctionbody1FunctionBody */
            {
                ArrayList<Object> list = new71();
                push(goTo(28), list, false);
            }
            break;
            case 72: /* reduce AAfunctionbody2FunctionBody */
            {
                ArrayList<Object> list = new72();
                push(goTo(28), list, false);
            }
            break;
            case 73: /* reduce AFunctionReturn */
            {
                ArrayList<Object> list = new73();
                push(goTo(29), list, false);
            }
            break;
            case 74: /* reduce AArithFunctionStatement */
            {
                ArrayList<Object> list = new74();
                push(goTo(30), list, false);
            }
            break;
            case 75: /* reduce AOtherStatementFunctionStatement */
            {
                ArrayList<Object> list = new75();
                push(goTo(30), list, false);
            }
            break;
            case 76: /* reduce AAndConditions */
            {
                ArrayList<Object> list = new76();
                push(goTo(31), list, false);
            }
            break;
            case 77: /* reduce ASimpleConditions */
            {
                ArrayList<Object> list = new77();
                push(goTo(31), list, false);
            }
            break;
            case 78: /* reduce AOrCondition */
            {
                ArrayList<Object> list = new78();
                push(goTo(32), list, false);
            }
            break;
            case 79: /* reduce ASimpleCondition */
            {
                ArrayList<Object> list = new79();
                push(goTo(32), list, false);
            }
            break;
            case 80: /* reduce AEqComparison */
            {
                ArrayList<Object> list = new80();
                push(goTo(33), list, false);
            }
            break;
            case 81: /* reduce ANeqComparison */
            {
                ArrayList<Object> list = new81();
                push(goTo(33), list, false);
            }
            break;
            case 82: /* reduce ALtComparison */
            {
                ArrayList<Object> list = new82();
                push(goTo(33), list, false);
            }
            break;
            case 83: /* reduce AGtComparison */
            {
                ArrayList<Object> list = new83();
                push(goTo(33), list, false);
            }
            break;
            case 84: /* reduce ASimpleComparison */
            {
                ArrayList<Object> list = new84();
                push(goTo(33), list, false);
            }
            break;
            case 85: /* reduce AMinusArith */
            {
                ArrayList<Object> list = new85();
                push(goTo(34), list, false);
            }
            break;
            case 86: /* reduce APlusArith */
            {
                ArrayList<Object> list = new86();
                push(goTo(34), list, false);
            }
            break;
            case 87: /* reduce ASimpleArith */
            {
                ArrayList<Object> list = new87();
                push(goTo(34), list, false);
            }
            break;
            case 88: /* reduce ATimesFactor */
            {
                ArrayList<Object> list = new88();
                push(goTo(35), list, false);
            }
            break;
            case 89: /* reduce ADivFactor */
            {
                ArrayList<Object> list = new89();
                push(goTo(35), list, false);
            }
            break;
            case 90: /* reduce ASimpleFactor */
            {
                ArrayList<Object> list = new90();
                push(goTo(35), list, false);
            }
            break;
            case 91: /* reduce ANumberExpression */
            {
                ArrayList<Object> list = new91();
                push(goTo(36), list, false);
            }
            break;
            case 92: /* reduce ANumberUnitExpression */
            {
                ArrayList<Object> list = new92();
                push(goTo(36), list, false);
            }
            break;
            case 93: /* reduce AColorExpression */
            {
                ArrayList<Object> list = new93();
                push(goTo(36), list, false);
            }
            break;
            case 94: /* reduce AStringExpression */
            {
                ArrayList<Object> list = new94();
                push(goTo(36), list, false);
            }
            break;
            case 95: /* reduce ANullExpression */
            {
                ArrayList<Object> list = new95();
                push(goTo(36), list, false);
            }
            break;
            case 96: /* reduce AUrlExpression */
            {
                ArrayList<Object> list = new96();
                push(goTo(36), list, false);
            }
            break;
            case 97: /* reduce AVariableNameExpression */
            {
                ArrayList<Object> list = new97();
                push(goTo(36), list, false);
            }
            break;
            case 98: /* reduce AAfunctioncallexpression1Expression */
            {
                ArrayList<Object> list = new98();
                push(goTo(36), list, false);
            }
            break;
            case 99: /* reduce AAfunctioncallexpression2Expression */
            {
                ArrayList<Object> list = new99();
                push(goTo(36), list, false);
            }
            break;
            case 100: /* reduce ACommandStatementExpression */
            {
                ArrayList<Object> list = new100();
                push(goTo(36), list, false);
            }
            break;
            case 101: /* reduce ATerminal$Statement */
            {
                ArrayList<Object> list = new101();
                push(goTo(37), list, true);
            }
            break;
            case 102: /* reduce ANonTerminal$Statement */
            {
                ArrayList<Object> list = new102();
                push(goTo(37), list, true);
            }
            break;
            case 103: /* reduce ATerminal$ElseIfStatement */
            {
                ArrayList<Object> list = new103();
                push(goTo(38), list, true);
            }
            break;
            case 104: /* reduce ANonTerminal$ElseIfStatement */
            {
                ArrayList<Object> list = new104();
                push(goTo(38), list, true);
            }
            break;
            case 105: /* reduce ATerminal$CommaVariable */
            {
                ArrayList<Object> list = new105();
                push(goTo(39), list, true);
            }
            break;
            case 106: /* reduce ANonTerminal$CommaVariable */
            {
                ArrayList<Object> list = new106();
                push(goTo(39), list, true);
            }
            break;
            case 107: /* reduce ATerminal$CommaIdent */
            {
                ArrayList<Object> list = new107();
                push(goTo(40), list, true);
            }
            break;
            case 108: /* reduce ANonTerminal$CommaIdent */
            {
                ArrayList<Object> list = new108();
                push(goTo(40), list, true);
            }
            break;
            case 109: /* reduce ATerminal$CommaExpression */
            {
                ArrayList<Object> list = new109();
                push(goTo(41), list, true);
            }
            break;
            case 110: /* reduce ANonTerminal$CommaExpression */
            {
                ArrayList<Object> list = new110();
                push(goTo(41), list, true);
            }
            break;
            case 111: /* reduce ATerminal$CommaKeyValue */
            {
                ArrayList<Object> list = new111();
                push(goTo(42), list, true);
            }
            break;
            case 112: /* reduce ANonTerminal$CommaKeyValue */
            {
                ArrayList<Object> list = new112();
                push(goTo(42), list, true);
            }
            break;
            case 113: /* reduce ATerminal$Param */
            {
                ArrayList<Object> list = new113();
                push(goTo(43), list, true);
            }
            break;
            case 114: /* reduce ANonTerminal$Param */
            {
                ArrayList<Object> list = new114();
                push(goTo(43), list, true);
            }
            break;
            case 115: /* reduce ATerminal$Expression */
            {
                ArrayList<Object> list = new115();
                push(goTo(44), list, true);
            }
            break;
            case 116: /* reduce ANonTerminal$Expression */
            {
                ArrayList<Object> list = new116();
                push(goTo(44), list, true);
            }
            break;
            case 117: /* reduce ATerminal$ContentInBlock */
            {
                ArrayList<Object> list = new117();
                push(goTo(45), list, true);
            }
            break;
            case 118: /* reduce ANonTerminal$ContentInBlock */
            {
                ArrayList<Object> list = new118();
                push(goTo(45), list, true);
            }
            break;
            case 119: /* reduce ATerminal$PrefixElement */
            {
                ArrayList<Object> list = new119();
                push(goTo(46), list, true);
            }
            break;
            case 120: /* reduce ANonTerminal$PrefixElement */
            {
                ArrayList<Object> list = new120();
                push(goTo(46), list, true);
            }
            break;
            case 121: /* reduce ATerminal$Attrib */
            {
                ArrayList<Object> list = new121();
                push(goTo(47), list, true);
            }
            break;
            case 122: /* reduce ANonTerminal$Attrib */
            {
                ArrayList<Object> list = new122();
                push(goTo(47), list, true);
            }
            break;
            case 123: /* reduce ATerminal$CommaConditions */
            {
                ArrayList<Object> list = new123();
                push(goTo(48), list, true);
            }
            break;
            case 124: /* reduce ANonTerminal$CommaConditions */
            {
                ArrayList<Object> list = new124();
                push(goTo(48), list, true);
            }
            break;
            case 125: /* reduce ATerminal$FunctionStatement */
            {
                ArrayList<Object> list = new125();
                push(goTo(49), list, true);
            }
            break;
            case 126: /* reduce ANonTerminal$FunctionStatement */
            {
                ArrayList<Object> list = new126();
                push(goTo(49), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAstylesheet1Stylesheet */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PStylesheet pstylesheetNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pstylesheetNode1 = new AStylesheet(listNode2);
        }
	nodeList.add(pstylesheetNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAstylesheet2Stylesheet */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStylesheet pstylesheetNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstylesheetNode1 = new AStylesheet(listNode3);
        }
	nodeList.add(pstylesheetNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ARulesetStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PSelectors pselectorsNode2;
        PBlock pblockNode3;
        pselectorsNode2 = (PSelectors)nodeArrayList1.get(0);
        pblockNode3 = (PBlock)nodeArrayList2.get(0);

        pstatementNode1 = new ARulesetStatement(pselectorsNode2, pblockNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAmixinstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TMixin tmixinNode2;
        PIdent pidentNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        PBlock pblockNode5;
        tmixinNode2 = (TMixin)nodeArrayList1.get(0);
        pidentNode3 = (PIdent)nodeArrayList2.get(0);
        pblockNode5 = (PBlock)nodeArrayList3.get(0);

        pstatementNode1 = new AMixinStatement(tmixinNode2, pidentNode3, null, pblockNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAmixinstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TMixin tmixinNode2;
        PIdent pidentNode3;
        PParams pparamsNode4;
        PBlock pblockNode5;
        tmixinNode2 = (TMixin)nodeArrayList1.get(0);
        pidentNode3 = (PIdent)nodeArrayList2.get(0);
        pparamsNode4 = (PParams)nodeArrayList3.get(0);
        pblockNode5 = (PBlock)nodeArrayList4.get(0);

        pstatementNode1 = new AMixinStatement(tmixinNode2, pidentNode3, pparamsNode4, pblockNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAfunctionstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TFunction tfunctionNode2;
        PIdent pidentNode3;
        TLparen tlparenNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRparen trparenNode6;
        PBlock pblockNode7;
        tfunctionNode2 = (TFunction)nodeArrayList1.get(0);
        pidentNode3 = (PIdent)nodeArrayList2.get(0);
        tlparenNode4 = (TLparen)nodeArrayList3.get(0);
        trparenNode6 = (TRparen)nodeArrayList4.get(0);
        pblockNode7 = (PBlock)nodeArrayList5.get(0);

        pstatementNode1 = new AFunctionStatement(tfunctionNode2, pidentNode3, tlparenNode4, null, trparenNode6, pblockNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAfunctionstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TFunction tfunctionNode2;
        PIdent pidentNode3;
        TLparen tlparenNode4;
        PParams pparamsNode5;
        TRparen trparenNode6;
        PBlock pblockNode7;
        tfunctionNode2 = (TFunction)nodeArrayList1.get(0);
        pidentNode3 = (PIdent)nodeArrayList2.get(0);
        tlparenNode4 = (TLparen)nodeArrayList3.get(0);
        pparamsNode5 = (PParams)nodeArrayList4.get(0);
        trparenNode6 = (TRparen)nodeArrayList5.get(0);
        pblockNode7 = (PBlock)nodeArrayList6.get(0);

        pstatementNode1 = new AFunctionStatement(tfunctionNode2, pidentNode3, tlparenNode4, pparamsNode5, trparenNode6, pblockNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAvariablestatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TVariable tvariableNode2;
        TColon tcolonNode3;
        PValues pvaluesNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TSemi tsemiNode6;
        tvariableNode2 = (TVariable)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pvaluesNode4 = (PValues)nodeArrayList3.get(0);
        tsemiNode6 = (TSemi)nodeArrayList4.get(0);

        pstatementNode1 = new AVariableStatement(tvariableNode2, tcolonNode3, pvaluesNode4, null, tsemiNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAvariablestatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TVariable tvariableNode2;
        TColon tcolonNode3;
        PValues pvaluesNode4;
        TDefault tdefaultNode5;
        TSemi tsemiNode6;
        tvariableNode2 = (TVariable)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pvaluesNode4 = (PValues)nodeArrayList3.get(0);
        tdefaultNode5 = (TDefault)nodeArrayList4.get(0);
        tsemiNode6 = (TSemi)nodeArrayList5.get(0);

        pstatementNode1 = new AVariableStatement(tvariableNode2, tcolonNode3, pvaluesNode4, tdefaultNode5, tsemiNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AIncludeSimpleStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TInclude tincludeNode2;
        PIdent pidentNode3;
        TSemi tsemiNode4;
        tincludeNode2 = (TInclude)nodeArrayList1.get(0);
        pidentNode3 = (PIdent)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pstatementNode1 = new AIncludeSimpleStatement(tincludeNode2, pidentNode3, tsemiNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAifstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TAtIf tatifNode2;
        PConditions pconditionsNode3;
        PBlock pblockNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode6 = null;
        tatifNode2 = (TAtIf)nodeArrayList1.get(0);
        pconditionsNode3 = (PConditions)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);
        {
            // Block
        }

        pstatementNode1 = new AIfStatement(tatifNode2, pconditionsNode3, pblockNode4, listNode5, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAifstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TAtIf tatifNode2;
        PConditions pconditionsNode3;
        PBlock pblockNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode7 = null;
        tatifNode2 = (TAtIf)nodeArrayList1.get(0);
        pconditionsNode3 = (PConditions)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstatementNode1 = new AIfStatement(tatifNode2, pconditionsNode3, pblockNode4, listNode6, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAifstatement3Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TAtIf tatifNode2;
        PConditions pconditionsNode3;
        PBlock pblockNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PElseStatement pelsestatementNode6;
        tatifNode2 = (TAtIf)nodeArrayList1.get(0);
        pconditionsNode3 = (PConditions)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);
        {
            // Block
        }
        pelsestatementNode6 = (PElseStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AIfStatement(tatifNode2, pconditionsNode3, pblockNode4, listNode5, pelsestatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAifstatement4Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TAtIf tatifNode2;
        PConditions pconditionsNode3;
        PBlock pblockNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PElseStatement pelsestatementNode7;
        tatifNode2 = (TAtIf)nodeArrayList1.get(0);
        pconditionsNode3 = (PConditions)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pelsestatementNode7 = (PElseStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(tatifNode2, pconditionsNode3, pblockNode4, listNode6, pelsestatementNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AForStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TAtFor tatforNode2;
        TVariable tvariableNode3;
        TFrom tfromNode4;
        TNumberLiteral tnumberliteralNode5;
        TThrough tthroughNode6;
        TNumberLiteral tnumberliteralNode7;
        PBlock pblockNode8;
        tatforNode2 = (TAtFor)nodeArrayList1.get(0);
        tvariableNode3 = (TVariable)nodeArrayList2.get(0);
        tfromNode4 = (TFrom)nodeArrayList3.get(0);
        tnumberliteralNode5 = (TNumberLiteral)nodeArrayList4.get(0);
        tthroughNode6 = (TThrough)nodeArrayList5.get(0);
        tnumberliteralNode7 = (TNumberLiteral)nodeArrayList6.get(0);
        pblockNode8 = (PBlock)nodeArrayList7.get(0);

        pstatementNode1 = new AForStatement(tatforNode2, tvariableNode3, tfromNode4, tnumberliteralNode5, tthroughNode6, tnumberliteralNode7, pblockNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TAtWhile tatwhileNode2;
        PConditions pconditionsNode3;
        PBlock pblockNode4;
        tatwhileNode2 = (TAtWhile)nodeArrayList1.get(0);
        pconditionsNode3 = (PConditions)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);

        pstatementNode1 = new AWhileStatement(tatwhileNode2, pconditionsNode3, pblockNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAeachstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TAtEach tateachNode2;
        TVariable tvariableNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TIn tinNode5;
        PEachValues peachvaluesNode6;
        PBlock pblockNode7;
        tateachNode2 = (TAtEach)nodeArrayList1.get(0);
        tvariableNode3 = (TVariable)nodeArrayList2.get(0);
        {
            // Block
        }
        tinNode5 = (TIn)nodeArrayList3.get(0);
        peachvaluesNode6 = (PEachValues)nodeArrayList4.get(0);
        pblockNode7 = (PBlock)nodeArrayList5.get(0);

        pstatementNode1 = new AEachStatement(tateachNode2, tvariableNode3, listNode4, tinNode5, peachvaluesNode6, pblockNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAeachstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TAtEach tateachNode2;
        TVariable tvariableNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TIn tinNode6;
        PEachValues peachvaluesNode7;
        PBlock pblockNode8;
        tateachNode2 = (TAtEach)nodeArrayList1.get(0);
        tvariableNode3 = (TVariable)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tinNode6 = (TIn)nodeArrayList4.get(0);
        peachvaluesNode7 = (PEachValues)nodeArrayList5.get(0);
        pblockNode8 = (PBlock)nodeArrayList6.get(0);

        pstatementNode1 = new AEachStatement(tateachNode2, tvariableNode3, listNode5, tinNode6, peachvaluesNode7, pblockNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAidentseachvalues1EachValues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEachValues peachvaluesNode1;
        {
            // Block
        PIdent pidentNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pidentNode2 = (PIdent)nodeArrayList1.get(0);
        {
            // Block
        }

        peachvaluesNode1 = new AIdentsEachValues(pidentNode2, listNode3);
        }
	nodeList.add(peachvaluesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAidentseachvalues2EachValues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEachValues peachvaluesNode1;
        {
            // Block
        PIdent pidentNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pidentNode2 = (PIdent)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        peachvaluesNode1 = new AIdentsEachValues(pidentNode2, listNode4);
        }
	nodeList.add(peachvaluesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AListEachValues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEachValues peachvaluesNode1;
        {
            // Block
        PListValues plistvaluesNode2;
        plistvaluesNode2 = (PListValues)nodeArrayList1.get(0);

        peachvaluesNode1 = new AListEachValues(plistvaluesNode2);
        }
	nodeList.add(peachvaluesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AMapEachValues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEachValues peachvaluesNode1;
        {
            // Block
        PMapValues pmapvaluesNode2;
        pmapvaluesNode2 = (PMapValues)nodeArrayList1.get(0);

        peachvaluesNode1 = new AMapEachValues(pmapvaluesNode2);
        }
	nodeList.add(peachvaluesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ACommaIdent */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommaIdent pcommaidentNode1;
        {
            // Block
        TComma tcommaNode2;
        PIdent pidentNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pidentNode3 = (PIdent)nodeArrayList2.get(0);

        pcommaidentNode1 = new ACommaIdent(tcommaNode2, pidentNode3);
        }
	nodeList.add(pcommaidentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAlistvalues1ListValues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListValues plistvaluesNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        plistvaluesNode1 = new AListValues(pexpressionNode2, listNode3);
        }
	nodeList.add(plistvaluesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAlistvalues2ListValues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListValues plistvaluesNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plistvaluesNode1 = new AListValues(pexpressionNode2, listNode4);
        }
	nodeList.add(plistvaluesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ACommaExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommaExpression pcommaexpressionNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pcommaexpressionNode1 = new ACommaExpression(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(pcommaexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAmapvalues1MapValues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMapValues pmapvaluesNode1;
        {
            // Block
        TLparen tlparenNode2;
        PKeyValue pkeyvalueNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRparen trparenNode5;
        tlparenNode2 = (TLparen)nodeArrayList1.get(0);
        pkeyvalueNode3 = (PKeyValue)nodeArrayList2.get(0);
        {
            // Block
        }
        trparenNode5 = (TRparen)nodeArrayList3.get(0);

        pmapvaluesNode1 = new AMapValues(tlparenNode2, pkeyvalueNode3, listNode4, trparenNode5);
        }
	nodeList.add(pmapvaluesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAmapvalues2MapValues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMapValues pmapvaluesNode1;
        {
            // Block
        TLparen tlparenNode2;
        PKeyValue pkeyvalueNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRparen trparenNode6;
        tlparenNode2 = (TLparen)nodeArrayList1.get(0);
        pkeyvalueNode3 = (PKeyValue)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trparenNode6 = (TRparen)nodeArrayList4.get(0);

        pmapvaluesNode1 = new AMapValues(tlparenNode2, pkeyvalueNode3, listNode5, trparenNode6);
        }
	nodeList.add(pmapvaluesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ACommaKeyValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommaKeyValue pcommakeyvalueNode1;
        {
            // Block
        TComma tcommaNode2;
        PKeyValue pkeyvalueNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pkeyvalueNode3 = (PKeyValue)nodeArrayList2.get(0);

        pcommakeyvalueNode1 = new ACommaKeyValue(tcommaNode2, pkeyvalueNode3);
        }
	nodeList.add(pcommakeyvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AKeyValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PKeyValue pkeyvalueNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        TColon tcolonNode3;
        PExpression pexpressionNode4;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pkeyvalueNode1 = new AKeyValue(tstringliteralNode2, tcolonNode3, pexpressionNode4);
        }
	nodeList.add(pkeyvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ACommaVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommaVariable pcommavariableNode1;
        {
            // Block
        TComma tcommaNode2;
        TVariable tvariableNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tvariableNode3 = (TVariable)nodeArrayList2.get(0);

        pcommavariableNode1 = new ACommaVariable(tcommaNode2, tvariableNode3);
        }
	nodeList.add(pcommavariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ASimpleIdentifierValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdentifierValue pidentifiervalueNode1;
        {
            // Block
        PIdent pidentNode2;
        pidentNode2 = (PIdent)nodeArrayList1.get(0);

        pidentifiervalueNode1 = new ASimpleIdentifierValue(pidentNode2);
        }
	nodeList.add(pidentifiervalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AColonIdentifierValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdentifierValue pidentifiervalueNode1;
        {
            // Block
        PIdent pidentNode2;
        TColon tcolonNode3;
        PValues pvaluesNode4;
        pidentNode2 = (PIdent)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pvaluesNode4 = (PValues)nodeArrayList3.get(0);

        pidentifiervalueNode1 = new AColonIdentifierValue(pidentNode2, tcolonNode3, pvaluesNode4);
        }
	nodeList.add(pidentifiervalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AElseIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseIfStatement pelseifstatementNode1;
        {
            // Block
        TAtElse tatelseNode2;
        TIf tifNode3;
        PConditions pconditionsNode4;
        PBlock pblockNode5;
        tatelseNode2 = (TAtElse)nodeArrayList1.get(0);
        tifNode3 = (TIf)nodeArrayList2.get(0);
        pconditionsNode4 = (PConditions)nodeArrayList3.get(0);
        pblockNode5 = (PBlock)nodeArrayList4.get(0);

        pelseifstatementNode1 = new AElseIfStatement(tatelseNode2, tifNode3, pconditionsNode4, pblockNode5);
        }
	nodeList.add(pelseifstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseStatement pelsestatementNode1;
        {
            // Block
        TAtElse tatelseNode2;
        PBlock pblockNode3;
        tatelseNode2 = (TAtElse)nodeArrayList1.get(0);
        pblockNode3 = (PBlock)nodeArrayList2.get(0);

        pelsestatementNode1 = new AElseStatement(tatelseNode2, pblockNode3);
        }
	nodeList.add(pelsestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAparams1Params */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        TLparen tlparenNode2;
        PParam pparamNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRparen trparenNode5;
        TEllipsis tellipsisNode6;
        tlparenNode2 = (TLparen)nodeArrayList1.get(0);
        pparamNode3 = (PParam)nodeArrayList2.get(0);
        {
            // Block
        }
        trparenNode5 = (TRparen)nodeArrayList3.get(0);
        tellipsisNode6 = (TEllipsis)nodeArrayList4.get(0);

        pparamsNode1 = new AParams(tlparenNode2, pparamNode3, listNode4, trparenNode5, tellipsisNode6);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAparams2Params */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        TLparen tlparenNode2;
        PParam pparamNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRparen trparenNode6;
        TEllipsis tellipsisNode7;
        tlparenNode2 = (TLparen)nodeArrayList1.get(0);
        pparamNode3 = (PParam)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trparenNode6 = (TRparen)nodeArrayList4.get(0);
        tellipsisNode7 = (TEllipsis)nodeArrayList5.get(0);

        pparamsNode1 = new AParams(tlparenNode2, pparamNode3, listNode5, trparenNode6, tellipsisNode7);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AWithCommaParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        TComma tcommaNode2;
        TDollar tdollarNode3;
        PIdent pidentNode4;
        PParamOptionalValue pparamoptionalvalueNode5;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tdollarNode3 = (TDollar)nodeArrayList2.get(0);
        pidentNode4 = (PIdent)nodeArrayList3.get(0);
        pparamoptionalvalueNode5 = (PParamOptionalValue)nodeArrayList4.get(0);

        pparamNode1 = new AWithCommaParam(tcommaNode2, tdollarNode3, pidentNode4, pparamoptionalvalueNode5);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ASimpleParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        TDollar tdollarNode2;
        PIdent pidentNode3;
        PParamOptionalValue pparamoptionalvalueNode4;
        tdollarNode2 = (TDollar)nodeArrayList1.get(0);
        pidentNode3 = (PIdent)nodeArrayList2.get(0);
        pparamoptionalvalueNode4 = (PParamOptionalValue)nodeArrayList3.get(0);

        pparamNode1 = new ASimpleParam(tdollarNode2, pidentNode3, pparamoptionalvalueNode4);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAparamoptionalvalue1ParamOptionalValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamOptionalValue pparamoptionalvalueNode1;
        {
            // Block
        TColon tcolonNode2;
        PExpression pexpressionNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        {
            // Block
        }

        pparamoptionalvalueNode1 = new AParamOptionalValue(tcolonNode2, pexpressionNode3, listNode4);
        }
	nodeList.add(pparamoptionalvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAparamoptionalvalue2ParamOptionalValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamOptionalValue pparamoptionalvalueNode1;
        {
            // Block
        TColon tcolonNode2;
        PExpression pexpressionNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pparamoptionalvalueNode1 = new AParamOptionalValue(tcolonNode2, pexpressionNode3, listNode5);
        }
	nodeList.add(pparamoptionalvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TBlockstart tblockstartNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TBlockend tblockendNode4;
        tblockstartNode2 = (TBlockstart)nodeArrayList1.get(0);
        {
            // Block
        }
        tblockendNode4 = (TBlockend)nodeArrayList2.get(0);

        pblockNode1 = new ABlock(tblockstartNode2, listNode3, tblockendNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TBlockstart tblockstartNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TBlockend tblockendNode5;
        tblockstartNode2 = (TBlockstart)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tblockendNode5 = (TBlockend)nodeArrayList3.get(0);

        pblockNode1 = new ABlock(tblockstartNode2, listNode4, tblockendNode5);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce APropertyContentInBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContentInBlock pcontentinblockNode1;
        {
            // Block
        PProperty ppropertyNode2;
        ppropertyNode2 = (PProperty)nodeArrayList1.get(0);

        pcontentinblockNode1 = new APropertyContentInBlock(ppropertyNode2);
        }
	nodeList.add(pcontentinblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AStatementContentInBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContentInBlock pcontentinblockNode1;
        {
            // Block
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pcontentinblockNode1 = new AStatementContentInBlock(pstatementNode2);
        }
	nodeList.add(pcontentinblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAselectors1Selectors */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSelectors pselectorsNode1;
        {
            // Block
        PPrefixElement pprefixelementNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pprefixelementNode2 = (PPrefixElement)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pselectorsNode1 = new ASelectors(pprefixelementNode2, listNode3, listNode4);
        }
	nodeList.add(pselectorsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAselectors2Selectors */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSelectors pselectorsNode1;
        {
            // Block
        PPrefixElement pprefixelementNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pprefixelementNode2 = (PPrefixElement)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }

        pselectorsNode1 = new ASelectors(pprefixelementNode2, listNode4, listNode5);
        }
	nodeList.add(pselectorsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAselectors3Selectors */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSelectors pselectorsNode1;
        {
            // Block
        PPrefixElement pprefixelementNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pprefixelementNode2 = (PPrefixElement)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pselectorsNode1 = new ASelectors(pprefixelementNode2, listNode3, listNode5);
        }
	nodeList.add(pselectorsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAselectors4Selectors */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSelectors pselectorsNode1;
        {
            // Block
        PPrefixElement pprefixelementNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pprefixelementNode2 = (PPrefixElement)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pselectorsNode1 = new ASelectors(pprefixelementNode2, listNode4, listNode6);
        }
	nodeList.add(pselectorsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AGtPrefixElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrefixElement pprefixelementNode1;
        {
            // Block
        TGt tgtNode2;
        PElement pelementNode3;
        tgtNode2 = (TGt)nodeArrayList1.get(0);
        pelementNode3 = (PElement)nodeArrayList2.get(0);

        pprefixelementNode1 = new AGtPrefixElement(tgtNode2, pelementNode3);
        }
	nodeList.add(pprefixelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce APlusPrefixElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrefixElement pprefixelementNode1;
        {
            // Block
        TPlus tplusNode2;
        PElement pelementNode3;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);
        pelementNode3 = (PElement)nodeArrayList2.get(0);

        pprefixelementNode1 = new APlusPrefixElement(tplusNode2, pelementNode3);
        }
	nodeList.add(pprefixelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ATilPrefixElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrefixElement pprefixelementNode1;
        {
            // Block
        TTil ttilNode2;
        PElement pelementNode3;
        ttilNode2 = (TTil)nodeArrayList1.get(0);
        pelementNode3 = (PElement)nodeArrayList2.get(0);

        pprefixelementNode1 = new ATilPrefixElement(ttilNode2, pelementNode3);
        }
	nodeList.add(pprefixelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ACommaPrefixElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrefixElement pprefixelementNode1;
        {
            // Block
        TComma tcommaNode2;
        PPrefixElement pprefixelementNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pprefixelementNode3 = (PPrefixElement)nodeArrayList2.get(0);

        pprefixelementNode1 = new ACommaPrefixElement(tcommaNode2, pprefixelementNode3);
        }
	nodeList.add(pprefixelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ASimplePrefixElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrefixElement pprefixelementNode1;
        {
            // Block
        PElement pelementNode2;
        pelementNode2 = (PElement)nodeArrayList1.get(0);

        pprefixelementNode1 = new ASimplePrefixElement(pelementNode2);
        }
	nodeList.add(pprefixelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AHashElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElement pelementNode1;
        {
            // Block
        THash thashNode2;
        PElement pelementNode3;
        thashNode2 = (THash)nodeArrayList1.get(0);
        pelementNode3 = (PElement)nodeArrayList2.get(0);

        pelementNode1 = new AHashElement(thashNode2, pelementNode3);
        }
	nodeList.add(pelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ADotElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElement pelementNode1;
        {
            // Block
        TDot tdotNode2;
        PElement pelementNode3;
        tdotNode2 = (TDot)nodeArrayList1.get(0);
        pelementNode3 = (PElement)nodeArrayList2.get(0);

        pelementNode1 = new ADotElement(tdotNode2, pelementNode3);
        }
	nodeList.add(pelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ASimpleElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElement pelementNode1;
        {
            // Block
        PSimpleElement psimpleelementNode2;
        psimpleelementNode2 = (PSimpleElement)nodeArrayList1.get(0);

        pelementNode1 = new ASimpleElement(psimpleelementNode2);
        }
	nodeList.add(pelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AIdentSimpleElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleElement psimpleelementNode1;
        {
            // Block
        PIdent pidentNode2;
        pidentNode2 = (PIdent)nodeArrayList1.get(0);

        psimpleelementNode1 = new AIdentSimpleElement(pidentNode2);
        }
	nodeList.add(psimpleelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAndSimpleElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleElement psimpleelementNode1;
        {
            // Block
        TAnd tandNode2;
        tandNode2 = (TAnd)nodeArrayList1.get(0);

        psimpleelementNode1 = new AAndSimpleElement(tandNode2);
        }
	nodeList.add(psimpleelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AStarSimpleElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleElement psimpleelementNode1;
        {
            // Block
        TStar tstarNode2;
        tstarNode2 = (TStar)nodeArrayList1.get(0);

        psimpleelementNode1 = new AStarSimpleElement(tstarNode2);
        }
	nodeList.add(psimpleelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AEqAttrib */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttrib pattribNode1;
        {
            // Block
        TLbrack tlbrackNode2;
        TIdentifier tidentifierNode3;
        TEq teqNode4;
        TStringLiteral tstringliteralNode5;
        TRbrack trbrackNode6;
        tlbrackNode2 = (TLbrack)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        teqNode4 = (TEq)nodeArrayList3.get(0);
        tstringliteralNode5 = (TStringLiteral)nodeArrayList4.get(0);
        trbrackNode6 = (TRbrack)nodeArrayList5.get(0);

        pattribNode1 = new AEqAttrib(tlbrackNode2, tidentifierNode3, teqNode4, tstringliteralNode5, trbrackNode6);
        }
	nodeList.add(pattribNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce APipeEqAttrib */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttrib pattribNode1;
        {
            // Block
        TLbrack tlbrackNode2;
        TIdentifier tidentifierNode3;
        TPipeEq tpipeeqNode4;
        TStringLiteral tstringliteralNode5;
        TRbrack trbrackNode6;
        tlbrackNode2 = (TLbrack)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tpipeeqNode4 = (TPipeEq)nodeArrayList3.get(0);
        tstringliteralNode5 = (TStringLiteral)nodeArrayList4.get(0);
        trbrackNode6 = (TRbrack)nodeArrayList5.get(0);

        pattribNode1 = new APipeEqAttrib(tlbrackNode2, tidentifierNode3, tpipeeqNode4, tstringliteralNode5, trbrackNode6);
        }
	nodeList.add(pattribNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ATildEqAttrib */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttrib pattribNode1;
        {
            // Block
        TLbrack tlbrackNode2;
        TIdentifier tidentifierNode3;
        TTildEq ttildeqNode4;
        TStringLiteral tstringliteralNode5;
        TRbrack trbrackNode6;
        tlbrackNode2 = (TLbrack)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        ttildeqNode4 = (TTildEq)nodeArrayList3.get(0);
        tstringliteralNode5 = (TStringLiteral)nodeArrayList4.get(0);
        trbrackNode6 = (TRbrack)nodeArrayList5.get(0);

        pattribNode1 = new ATildEqAttrib(tlbrackNode2, tidentifierNode3, ttildeqNode4, tstringliteralNode5, trbrackNode6);
        }
	nodeList.add(pattribNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AProperty */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProperty ppropertyNode1;
        {
            // Block
        PIdent pidentNode2;
        TColon tcolonNode3;
        PValues pvaluesNode4;
        TSemi tsemiNode5;
        pidentNode2 = (PIdent)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pvaluesNode4 = (PValues)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        ppropertyNode1 = new AProperty(pidentNode2, tcolonNode3, pvaluesNode4, tsemiNode5);
        }
	nodeList.add(ppropertyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ASimpleIdent */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdent pidentNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pidentNode1 = new ASimpleIdent(tidentifierNode2);
        }
	nodeList.add(pidentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AInterpolationIdent */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdent pidentNode1;
        {
            // Block
        THash thashNode2;
        TBlockstart tblockstartNode3;
        TDollar tdollarNode4;
        TIdentifier tidentifierNode5;
        TBlockend tblockendNode6;
        thashNode2 = (THash)nodeArrayList1.get(0);
        tblockstartNode3 = (TBlockstart)nodeArrayList2.get(0);
        tdollarNode4 = (TDollar)nodeArrayList3.get(0);
        tidentifierNode5 = (TIdentifier)nodeArrayList4.get(0);
        tblockendNode6 = (TBlockend)nodeArrayList5.get(0);

        pidentNode1 = new AInterpolationIdent(thashNode2, tblockstartNode3, tdollarNode4, tidentifierNode5, tblockendNode6);
        }
	nodeList.add(pidentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AAfunctioncallfunctioncall1FunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionCall pfunctioncallNode1;
        {
            // Block
        PIdent pidentNode2;
        TLparen tlparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRparen trparenNode5;
        pidentNode2 = (PIdent)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        trparenNode5 = (TRparen)nodeArrayList3.get(0);

        pfunctioncallNode1 = new AFunctionCallFunctionCall(pidentNode2, tlparenNode3, null, trparenNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAfunctioncallfunctioncall2FunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionCall pfunctioncallNode1;
        {
            // Block
        PIdent pidentNode2;
        TLparen tlparenNode3;
        PValues pvaluesNode4;
        TRparen trparenNode5;
        pidentNode2 = (PIdent)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pvaluesNode4 = (PValues)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);

        pfunctioncallNode1 = new AFunctionCallFunctionCall(pidentNode2, tlparenNode3, pvaluesNode4, trparenNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAvalues1Values */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValues pvaluesNode1;
        {
            // Block
        PConditions pconditionsNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pconditionsNode2 = (PConditions)nodeArrayList1.get(0);
        {
            // Block
        }

        pvaluesNode1 = new AValues(pconditionsNode2, listNode3);
        }
	nodeList.add(pvaluesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AAvalues2Values */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValues pvaluesNode1;
        {
            // Block
        PConditions pconditionsNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pconditionsNode2 = (PConditions)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pvaluesNode1 = new AValues(pconditionsNode2, listNode4);
        }
	nodeList.add(pvaluesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ACommaConditions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommaConditions pcommaconditionsNode1;
        {
            // Block
        TComma tcommaNode2;
        PConditions pconditionsNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pconditionsNode3 = (PConditions)nodeArrayList2.get(0);

        pcommaconditionsNode1 = new ACommaConditions(tcommaNode2, pconditionsNode3);
        }
	nodeList.add(pcommaconditionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AAfunctionbody1FunctionBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionBody pfunctionbodyNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PFunctionReturn pfunctionreturnNode3;
        {
            // Block
        }
        pfunctionreturnNode3 = (PFunctionReturn)nodeArrayList1.get(0);

        pfunctionbodyNode1 = new AFunctionBody(listNode2, pfunctionreturnNode3);
        }
	nodeList.add(pfunctionbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AAfunctionbody2FunctionBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionBody pfunctionbodyNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PFunctionReturn pfunctionreturnNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pfunctionreturnNode4 = (PFunctionReturn)nodeArrayList2.get(0);

        pfunctionbodyNode1 = new AFunctionBody(listNode3, pfunctionreturnNode4);
        }
	nodeList.add(pfunctionbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AFunctionReturn */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionReturn pfunctionreturnNode1;
        {
            // Block
        TReturn treturnNode2;
        PConditions pconditionsNode3;
        TSemi tsemiNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pconditionsNode3 = (PConditions)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pfunctionreturnNode1 = new AFunctionReturn(treturnNode2, pconditionsNode3, tsemiNode4);
        }
	nodeList.add(pfunctionreturnNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AArithFunctionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionStatement pfunctionstatementNode1;
        {
            // Block
        PArith parithNode2;
        TSemi tsemiNode3;
        parithNode2 = (PArith)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pfunctionstatementNode1 = new AArithFunctionStatement(parithNode2, tsemiNode3);
        }
	nodeList.add(pfunctionstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AOtherStatementFunctionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionStatement pfunctionstatementNode1;
        {
            // Block
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pfunctionstatementNode1 = new AOtherStatementFunctionStatement(pstatementNode2);
        }
	nodeList.add(pfunctionstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AAndConditions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditions pconditionsNode1;
        {
            // Block
        PConditions pconditionsNode2;
        TDoubleAnd tdoubleandNode3;
        PCondition pconditionNode4;
        pconditionsNode2 = (PConditions)nodeArrayList1.get(0);
        tdoubleandNode3 = (TDoubleAnd)nodeArrayList2.get(0);
        pconditionNode4 = (PCondition)nodeArrayList3.get(0);

        pconditionsNode1 = new AAndConditions(pconditionsNode2, tdoubleandNode3, pconditionNode4);
        }
	nodeList.add(pconditionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ASimpleConditions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditions pconditionsNode1;
        {
            // Block
        PCondition pconditionNode2;
        pconditionNode2 = (PCondition)nodeArrayList1.get(0);

        pconditionsNode1 = new ASimpleConditions(pconditionNode2);
        }
	nodeList.add(pconditionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AOrCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PCondition pconditionNode2;
        TOr torNode3;
        PComparison pcomparisonNode4;
        pconditionNode2 = (PCondition)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pcomparisonNode4 = (PComparison)nodeArrayList3.get(0);

        pconditionNode1 = new AOrCondition(pconditionNode2, torNode3, pcomparisonNode4);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ASimpleCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);

        pconditionNode1 = new ASimpleCondition(pcomparisonNode2);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AEqComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        TEqeq teqeqNode3;
        PArith parithNode4;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        teqeqNode3 = (TEqeq)nodeArrayList2.get(0);
        parithNode4 = (PArith)nodeArrayList3.get(0);

        pcomparisonNode1 = new AEqComparison(pcomparisonNode2, teqeqNode3, parithNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ANeqComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        TNoteq tnoteqNode3;
        PArith parithNode4;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        tnoteqNode3 = (TNoteq)nodeArrayList2.get(0);
        parithNode4 = (PArith)nodeArrayList3.get(0);

        pcomparisonNode1 = new ANeqComparison(pcomparisonNode2, tnoteqNode3, parithNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ALtComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        TLt tltNode3;
        PArith parithNode4;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        tltNode3 = (TLt)nodeArrayList2.get(0);
        parithNode4 = (PArith)nodeArrayList3.get(0);

        pcomparisonNode1 = new ALtComparison(pcomparisonNode2, tltNode3, parithNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AGtComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        TGt tgtNode3;
        PArith parithNode4;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        tgtNode3 = (TGt)nodeArrayList2.get(0);
        parithNode4 = (PArith)nodeArrayList3.get(0);

        pcomparisonNode1 = new AGtComparison(pcomparisonNode2, tgtNode3, parithNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ASimpleComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PArith parithNode2;
        parithNode2 = (PArith)nodeArrayList1.get(0);

        pcomparisonNode1 = new ASimpleComparison(parithNode2);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AMinusArith */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArith parithNode1;
        {
            // Block
        PArith parithNode2;
        TMinus tminusNode3;
        PFactor pfactorNode4;
        parithNode2 = (PArith)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        parithNode1 = new AMinusArith(parithNode2, tminusNode3, pfactorNode4);
        }
	nodeList.add(parithNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce APlusArith */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArith parithNode1;
        {
            // Block
        PArith parithNode2;
        TPlus tplusNode3;
        PFactor pfactorNode4;
        parithNode2 = (PArith)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        parithNode1 = new APlusArith(parithNode2, tplusNode3, pfactorNode4);
        }
	nodeList.add(parithNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ASimpleArith */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArith parithNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        parithNode1 = new ASimpleArith(pfactorNode2);
        }
	nodeList.add(parithNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ATimesFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TTimes ttimesNode3;
        PExpression pexpressionNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        ttimesNode3 = (TTimes)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pfactorNode1 = new ATimesFactor(pfactorNode2, ttimesNode3, pexpressionNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ADivFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TDiv tdivNode3;
        PExpression pexpressionNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pfactorNode1 = new ADivFactor(pfactorNode2, tdivNode3, pexpressionNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ASimpleFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pfactorNode1 = new ASimpleFactor(pexpressionNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ANumberExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TNumberLiteral tnumberliteralNode2;
        tnumberliteralNode2 = (TNumberLiteral)nodeArrayList1.get(0);

        pexpressionNode1 = new ANumberExpression(tnumberliteralNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ANumberUnitExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TNumberLiteral tnumberliteralNode2;
        TUnit tunitNode3;
        tnumberliteralNode2 = (TNumberLiteral)nodeArrayList1.get(0);
        tunitNode3 = (TUnit)nodeArrayList2.get(0);

        pexpressionNode1 = new ANumberUnitExpression(tnumberliteralNode2, tunitNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce AColorExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TColor tcolorNode2;
        tcolorNode2 = (TColor)nodeArrayList1.get(0);

        pexpressionNode1 = new AColorExpression(tcolorNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce AStringExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pexpressionNode1 = new AStringExpression(tstringliteralNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce ANullExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TNull tnullNode2;
        tnullNode2 = (TNull)nodeArrayList1.get(0);

        pexpressionNode1 = new ANullExpression(tnullNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce AUrlExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TUrl turlNode2;
        turlNode2 = (TUrl)nodeArrayList1.get(0);

        pexpressionNode1 = new AUrlExpression(turlNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce AVariableNameExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TVariable tvariableNode2;
        tvariableNode2 = (TVariable)nodeArrayList1.get(0);

        pexpressionNode1 = new AVariableNameExpression(tvariableNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce AAfunctioncallexpression1Expression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLparen tlparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRparen trparenNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        trparenNode5 = (TRparen)nodeArrayList3.get(0);

        pexpressionNode1 = new AFunctionCallExpression(tidentifierNode2, tlparenNode3, null, trparenNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce AAfunctioncallexpression2Expression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLparen tlparenNode3;
        PConditions pconditionsNode4;
        TRparen trparenNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pconditionsNode4 = (PConditions)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);

        pexpressionNode1 = new AFunctionCallExpression(tidentifierNode2, tlparenNode3, pconditionsNode4, trparenNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce ACommandStatementExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TLparen tlparenNode2;
        PConditions pconditionsNode3;
        TRparen trparenNode4;
        tlparenNode2 = (TLparen)nodeArrayList1.get(0);
        pconditionsNode3 = (PConditions)nodeArrayList2.get(0);
        trparenNode4 = (TRparen)nodeArrayList3.get(0);

        pexpressionNode1 = new ACommandStatementExpression(tlparenNode2, pconditionsNode3, trparenNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce ATerminal$ElseIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PElseIfStatement pelseifstatementNode1;
        pelseifstatementNode1 = (PElseIfStatement)nodeArrayList1.get(0);
	if(pelseifstatementNode1 != null)
	{
	  listNode2.add(pelseifstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ANonTerminal$ElseIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PElseIfStatement pelseifstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pelseifstatementNode2 = (PElseIfStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pelseifstatementNode2 != null)
	{
	  listNode3.add(pelseifstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ATerminal$CommaVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCommaVariable pcommavariableNode1;
        pcommavariableNode1 = (PCommaVariable)nodeArrayList1.get(0);
	if(pcommavariableNode1 != null)
	{
	  listNode2.add(pcommavariableNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce ANonTerminal$CommaVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCommaVariable pcommavariableNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommavariableNode2 = (PCommaVariable)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommavariableNode2 != null)
	{
	  listNode3.add(pcommavariableNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce ATerminal$CommaIdent */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCommaIdent pcommaidentNode1;
        pcommaidentNode1 = (PCommaIdent)nodeArrayList1.get(0);
	if(pcommaidentNode1 != null)
	{
	  listNode2.add(pcommaidentNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce ANonTerminal$CommaIdent */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCommaIdent pcommaidentNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommaidentNode2 = (PCommaIdent)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommaidentNode2 != null)
	{
	  listNode3.add(pcommaidentNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce ATerminal$CommaExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCommaExpression pcommaexpressionNode1;
        pcommaexpressionNode1 = (PCommaExpression)nodeArrayList1.get(0);
	if(pcommaexpressionNode1 != null)
	{
	  listNode2.add(pcommaexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce ANonTerminal$CommaExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCommaExpression pcommaexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommaexpressionNode2 = (PCommaExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommaexpressionNode2 != null)
	{
	  listNode3.add(pcommaexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce ATerminal$CommaKeyValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCommaKeyValue pcommakeyvalueNode1;
        pcommakeyvalueNode1 = (PCommaKeyValue)nodeArrayList1.get(0);
	if(pcommakeyvalueNode1 != null)
	{
	  listNode2.add(pcommakeyvalueNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce ANonTerminal$CommaKeyValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCommaKeyValue pcommakeyvalueNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommakeyvalueNode2 = (PCommaKeyValue)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommakeyvalueNode2 != null)
	{
	  listNode3.add(pcommakeyvalueNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce ATerminal$Param */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParam pparamNode1;
        pparamNode1 = (PParam)nodeArrayList1.get(0);
	if(pparamNode1 != null)
	{
	  listNode2.add(pparamNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce ANonTerminal$Param */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParam pparamNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparamNode2 = (PParam)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparamNode2 != null)
	{
	  listNode3.add(pparamNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new115() /* reduce ATerminal$Expression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new116() /* reduce ANonTerminal$Expression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new117() /* reduce ATerminal$ContentInBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PContentInBlock pcontentinblockNode1;
        pcontentinblockNode1 = (PContentInBlock)nodeArrayList1.get(0);
	if(pcontentinblockNode1 != null)
	{
	  listNode2.add(pcontentinblockNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new118() /* reduce ANonTerminal$ContentInBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PContentInBlock pcontentinblockNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcontentinblockNode2 = (PContentInBlock)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcontentinblockNode2 != null)
	{
	  listNode3.add(pcontentinblockNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new119() /* reduce ATerminal$PrefixElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PPrefixElement pprefixelementNode1;
        pprefixelementNode1 = (PPrefixElement)nodeArrayList1.get(0);
	if(pprefixelementNode1 != null)
	{
	  listNode2.add(pprefixelementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new120() /* reduce ANonTerminal$PrefixElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PPrefixElement pprefixelementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pprefixelementNode2 = (PPrefixElement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pprefixelementNode2 != null)
	{
	  listNode3.add(pprefixelementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new121() /* reduce ATerminal$Attrib */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAttrib pattribNode1;
        pattribNode1 = (PAttrib)nodeArrayList1.get(0);
	if(pattribNode1 != null)
	{
	  listNode2.add(pattribNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new122() /* reduce ANonTerminal$Attrib */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAttrib pattribNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pattribNode2 = (PAttrib)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pattribNode2 != null)
	{
	  listNode3.add(pattribNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new123() /* reduce ATerminal$CommaConditions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCommaConditions pcommaconditionsNode1;
        pcommaconditionsNode1 = (PCommaConditions)nodeArrayList1.get(0);
	if(pcommaconditionsNode1 != null)
	{
	  listNode2.add(pcommaconditionsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new124() /* reduce ANonTerminal$CommaConditions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCommaConditions pcommaconditionsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommaconditionsNode2 = (PCommaConditions)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommaconditionsNode2 != null)
	{
	  listNode3.add(pcommaconditionsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new125() /* reduce ATerminal$FunctionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFunctionStatement pfunctionstatementNode1;
        pfunctionstatementNode1 = (PFunctionStatement)nodeArrayList1.get(0);
	if(pfunctionstatementNode1 != null)
	{
	  listNode2.add(pfunctionstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new126() /* reduce ANonTerminal$FunctionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PFunctionStatement pfunctionstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfunctionstatementNode2 = (PFunctionStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfunctionstatementNode2 != null)
	{
	  listNode3.add(pfunctionstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {11, SHIFT, 1}, {12, SHIFT, 2}, {16, SHIFT, 3}, {17, SHIFT, 4}, {20, SHIFT, 5}, {23, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {36, SHIFT, 9}, {37, SHIFT, 10}, {40, SHIFT, 11}, {41, SHIFT, 12}, {42, SHIFT, 13}, {43, SHIFT, 14}, {44, SHIFT, 15}, {50, SHIFT, 16}, {51, SHIFT, 17}, },
			{{-1, ERROR, 1}, {17, SHIFT, 4}, {20, SHIFT, 5}, {23, SHIFT, 6}, {26, SHIFT, 8}, {51, SHIFT, 17}, },
			{{-1, ERROR, 2}, {17, SHIFT, 4}, {20, SHIFT, 5}, {23, SHIFT, 6}, {26, SHIFT, 8}, {51, SHIFT, 17}, },
			{{-1, ERROR, 3}, {11, SHIFT, 1}, {12, SHIFT, 2}, {16, SHIFT, 3}, {17, SHIFT, 4}, {20, SHIFT, 5}, {23, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {51, SHIFT, 17}, },
			{{-1, ERROR, 4}, {17, SHIFT, 4}, {20, SHIFT, 5}, {23, SHIFT, 6}, {26, SHIFT, 8}, {51, SHIFT, 17}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 6}, {7, SHIFT, 30}, {17, SHIFT, 4}, {20, SHIFT, 5}, {23, SHIFT, 6}, {26, SHIFT, 8}, {51, SHIFT, 17}, },
			{{-1, ERROR, 7}, {17, SHIFT, 4}, {20, SHIFT, 5}, {23, SHIFT, 6}, {26, SHIFT, 8}, {51, SHIFT, 17}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 9}, {23, SHIFT, 33}, {51, SHIFT, 17}, },
			{{-1, ERROR, 10}, {23, SHIFT, 33}, {51, SHIFT, 17}, },
			{{-1, ERROR, 11}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, ERROR, 12}, {50, SHIFT, 50}, },
			{{-1, ERROR, 13}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, ERROR, 14}, {50, SHIFT, 52}, },
			{{-1, ERROR, 15}, {23, SHIFT, 33}, {51, SHIFT, 17}, },
			{{-1, ERROR, 16}, {14, SHIFT, 54}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 18}, {56, ACCEPT, -1}, },
			{{-1, REDUCE, 101}, },
			{{-1, ERROR, 20}, {7, SHIFT, 55}, },
			{{-1, REDUCE, 45}, {9, SHIFT, 57}, {11, SHIFT, 1}, {12, SHIFT, 2}, {16, SHIFT, 3}, {17, SHIFT, 4}, {20, SHIFT, 5}, {23, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {51, SHIFT, 17}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 1}, {11, SHIFT, 1}, {12, SHIFT, 2}, {16, SHIFT, 3}, {17, SHIFT, 4}, {20, SHIFT, 5}, {23, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {36, SHIFT, 9}, {37, SHIFT, 10}, {40, SHIFT, 11}, {41, SHIFT, 12}, {42, SHIFT, 13}, {43, SHIFT, 14}, {44, SHIFT, 15}, {50, SHIFT, 16}, {51, SHIFT, 17}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 30}, {18, SHIFT, 63}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 33}, {7, SHIFT, 30}, },
			{{-1, ERROR, 34}, {5, SHIFT, 64}, {7, SHIFT, 55}, },
			{{-1, ERROR, 35}, {5, SHIFT, 67}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 37}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 39}, {5, SHIFT, 69}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 91}, {3, SHIFT, 70}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 44}, {7, SHIFT, 55}, {21, SHIFT, 71}, },
			{{-1, REDUCE, 77}, {22, SHIFT, 73}, },
			{{-1, REDUCE, 79}, {11, SHIFT, 74}, {13, SHIFT, 75}, {31, SHIFT, 76}, {32, SHIFT, 77}, },
			{{-1, REDUCE, 84}, {25, SHIFT, 78}, {29, SHIFT, 79}, },
			{{-1, REDUCE, 87}, {27, SHIFT, 80}, {28, SHIFT, 81}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 50}, {47, SHIFT, 82}, },
			{{-1, ERROR, 51}, {7, SHIFT, 55}, {21, SHIFT, 71}, },
			{{-1, ERROR, 52}, {1, SHIFT, 84}, {16, SHIFT, 85}, },
			{{-1, ERROR, 53}, {15, SHIFT, 88}, },
			{{-1, ERROR, 54}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, ERROR, 55}, {8, SHIFT, 91}, {11, SHIFT, 1}, {12, SHIFT, 2}, {16, SHIFT, 3}, {17, SHIFT, 4}, {20, SHIFT, 5}, {23, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {36, SHIFT, 9}, {37, SHIFT, 10}, {40, SHIFT, 11}, {41, SHIFT, 12}, {42, SHIFT, 13}, {43, SHIFT, 14}, {44, SHIFT, 15}, {50, SHIFT, 16}, {51, SHIFT, 17}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 57}, {51, SHIFT, 97}, },
			{{-1, REDUCE, 119}, },
			{{-1, REDUCE, 121}, },
			{{-1, REDUCE, 46}, {9, SHIFT, 57}, {11, SHIFT, 1}, {12, SHIFT, 2}, {16, SHIFT, 3}, {17, SHIFT, 4}, {20, SHIFT, 5}, {23, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {51, SHIFT, 17}, },
			{{-1, REDUCE, 47}, {9, SHIFT, 57}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 63}, {51, SHIFT, 101}, },
			{{-1, ERROR, 64}, {16, SHIFT, 102}, {18, SHIFT, 103}, },
			{{-1, ERROR, 65}, {7, SHIFT, 55}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 67}, {5, SHIFT, 64}, {6, SHIFT, 106}, },
			{{-1, ERROR, 68}, {6, SHIFT, 108}, {21, SHIFT, 71}, },
			{{-1, ERROR, 69}, {0, SHIFT, 36}, {5, SHIFT, 37}, {6, SHIFT, 109}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 71}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, REDUCE, 10}, {38, SHIFT, 112}, },
			{{-1, ERROR, 73}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, ERROR, 74}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, ERROR, 75}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, ERROR, 76}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, ERROR, 77}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, ERROR, 78}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, ERROR, 79}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, ERROR, 80}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, ERROR, 81}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, ERROR, 82}, {53, SHIFT, 125}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 84}, {0, SHIFT, 36}, {5, SHIFT, 126}, {23, SHIFT, 33}, {50, SHIFT, 38}, {51, SHIFT, 127}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, ERROR, 85}, {50, SHIFT, 133}, },
			{{-1, REDUCE, 105}, },
			{{-1, ERROR, 87}, {1, SHIFT, 134}, {16, SHIFT, 85}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 89}, {2, SHIFT, 136}, {15, SHIFT, 137}, },
			{{-1, REDUCE, 68}, {16, SHIFT, 138}, {21, SHIFT, 71}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 117}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 57}, {14, SHIFT, 141}, },
			{{-1, ERROR, 96}, {8, SHIFT, 142}, {11, SHIFT, 1}, {12, SHIFT, 2}, {16, SHIFT, 3}, {17, SHIFT, 4}, {20, SHIFT, 5}, {23, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {36, SHIFT, 9}, {37, SHIFT, 10}, {40, SHIFT, 11}, {41, SHIFT, 12}, {42, SHIFT, 13}, {43, SHIFT, 14}, {44, SHIFT, 15}, {50, SHIFT, 16}, {51, SHIFT, 17}, },
			{{-1, ERROR, 97}, {33, SHIFT, 144}, {34, SHIFT, 145}, {35, SHIFT, 146}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 48}, {9, SHIFT, 57}, },
			{{-1, REDUCE, 122}, },
			{{-1, ERROR, 101}, {8, SHIFT, 147}, },
			{{-1, ERROR, 102}, {18, SHIFT, 148}, },
			{{-1, ERROR, 103}, {23, SHIFT, 33}, {51, SHIFT, 17}, },
			{{-1, ERROR, 104}, {6, SHIFT, 150}, {16, SHIFT, 102}, {18, SHIFT, 103}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 106}, {7, SHIFT, 55}, },
			{{-1, ERROR, 107}, {6, SHIFT, 154}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 110}, {6, SHIFT, 155}, {21, SHIFT, 71}, },
			{{-1, REDUCE, 76}, {22, SHIFT, 73}, },
			{{-1, ERROR, 112}, {7, SHIFT, 55}, {39, SHIFT, 156}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 11}, {38, SHIFT, 112}, },
			{{-1, REDUCE, 78}, {11, SHIFT, 74}, {13, SHIFT, 75}, {31, SHIFT, 76}, {32, SHIFT, 77}, },
			{{-1, REDUCE, 83}, {25, SHIFT, 78}, {29, SHIFT, 79}, },
			{{-1, REDUCE, 82}, {25, SHIFT, 78}, {29, SHIFT, 79}, },
			{{-1, REDUCE, 80}, {25, SHIFT, 78}, {29, SHIFT, 79}, },
			{{-1, REDUCE, 81}, {25, SHIFT, 78}, {29, SHIFT, 79}, },
			{{-1, REDUCE, 86}, {27, SHIFT, 80}, {28, SHIFT, 81}, },
			{{-1, REDUCE, 85}, {27, SHIFT, 80}, {28, SHIFT, 81}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 125}, {48, SHIFT, 160}, },
			{{-1, ERROR, 126}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 161}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, REDUCE, 64}, {5, SHIFT, 69}, },
			{{-1, ERROR, 128}, {7, SHIFT, 55}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 18}, {16, SHIFT, 164}, },
			{{-1, REDUCE, 23}, {16, SHIFT, 167}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 134}, {0, SHIFT, 36}, {5, SHIFT, 126}, {23, SHIFT, 33}, {50, SHIFT, 38}, {51, SHIFT, 127}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 136}, {15, SHIFT, 171}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 138}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, REDUCE, 123}, },
			{{-1, REDUCE, 69}, {16, SHIFT, 138}, },
			{{-1, ERROR, 141}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 118}, },
			{{-1, ERROR, 144}, {52, SHIFT, 175}, },
			{{-1, ERROR, 145}, {52, SHIFT, 176}, },
			{{-1, ERROR, 146}, {52, SHIFT, 177}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 148}, {23, SHIFT, 33}, {51, SHIFT, 17}, },
			{{-1, ERROR, 149}, {14, SHIFT, 179}, },
			{{-1, ERROR, 150}, {4, SHIFT, 181}, },
			{{-1, REDUCE, 113}, },
			{{-1, ERROR, 152}, {6, SHIFT, 182}, {16, SHIFT, 102}, {18, SHIFT, 103}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 154}, {7, SHIFT, 55}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 156}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 160}, {53, SHIFT, 186}, },
			{{-1, REDUCE, 94}, {14, SHIFT, 187}, },
			{{-1, ERROR, 162}, {6, SHIFT, 188}, {16, SHIFT, 189}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 164}, {23, SHIFT, 33}, {51, SHIFT, 17}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 19}, {16, SHIFT, 164}, },
			{{-1, ERROR, 167}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 24}, {16, SHIFT, 167}, },
			{{-1, ERROR, 170}, {7, SHIFT, 55}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 70}, {21, SHIFT, 71}, },
			{{-1, REDUCE, 124}, },
			{{-1, ERROR, 174}, {15, SHIFT, 197}, },
			{{-1, ERROR, 175}, {10, SHIFT, 198}, },
			{{-1, ERROR, 176}, {10, SHIFT, 199}, },
			{{-1, ERROR, 177}, {10, SHIFT, 200}, },
			{{-1, ERROR, 178}, {14, SHIFT, 179}, },
			{{-1, ERROR, 179}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 182}, {4, SHIFT, 203}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 185}, {7, SHIFT, 55}, {21, SHIFT, 71}, },
			{{-1, ERROR, 186}, {7, SHIFT, 55}, },
			{{-1, ERROR, 187}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 189}, {52, SHIFT, 207}, },
			{{-1, REDUCE, 111}, },
			{{-1, ERROR, 191}, {6, SHIFT, 209}, {16, SHIFT, 189}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 108}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 39}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 207}, {14, SHIFT, 187}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 40}, {0, SHIFT, 36}, {5, SHIFT, 37}, {50, SHIFT, 38}, {51, SHIFT, 39}, {52, SHIFT, 40}, {53, SHIFT, 41}, {54, SHIFT, 42}, {55, SHIFT, 43}, },
			{{-1, REDUCE, 116}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 18}, },
			{{-1, 92}, {0, 19}, {25, 62}, },
			{{-1, 128}, {134, 170}, },
			{{-1, 165}, {166, 193}, },
			{{-1, 129}, },
			{{-1, 168}, {169, 195}, },
			{{-1, 130}, },
			{{-1, 190}, {191, 210}, },
			{{-1, 162}, {189, 208}, },
			{{-1, 86}, {87, 135}, },
			{{-1, -1}, },
			{{-1, 113}, {115, 158}, },
			{{-1, 114}, {115, 159}, },
			{{-1, 65}, {67, 107}, },
			{{-1, 104}, {104, 151}, {152, 183}, },
			{{-1, 180}, {178, 201}, },
			{{-1, 56}, {34, 66}, {44, 72}, {51, 83}, {65, 105}, {106, 153}, {112, 157}, {128, 163}, {154, 184}, {170, 196}, {185, 204}, {186, 205}, },
			{{-1, 93}, {96, 143}, },
			{{-1, 20}, },
			{{-1, 21}, {3, 28}, {21, 58}, {60, 98}, },
			{{-1, 22}, {1, 26}, {2, 27}, {4, 29}, {6, 31}, {7, 32}, },
			{{-1, 23}, },
			{{-1, 59}, {61, 100}, {99, 100}, },
			{{-1, 94}, },
			{{-1, 24}, {9, 34}, {10, 35}, {15, 53}, {55, 95}, {84, 131}, {96, 95}, {103, 149}, {134, 131}, {148, 178}, {164, 192}, },
			{{-1, -1}, },
			{{-1, 89}, {141, 174}, },
			{{-1, 139}, {140, 173}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 68}, {11, 44}, {13, 51}, {54, 90}, {69, 110}, {138, 172}, {141, 90}, {156, 185}, },
			{{-1, 45}, {71, 111}, },
			{{-1, 46}, {73, 116}, },
			{{-1, 47}, {74, 117}, {75, 118}, {76, 119}, {77, 120}, },
			{{-1, 48}, {78, 121}, {79, 122}, },
			{{-1, 49}, {80, 123}, {81, 124}, {84, 132}, {134, 132}, {167, 194}, {179, 202}, {187, 206}, {202, 211}, {212, 213}, },
			{{-1, 25}, },
			{{-1, 115}, },
			{{-1, 87}, },
			{{-1, 166}, },
			{{-1, 169}, },
			{{-1, 191}, },
			{{-1, 152}, },
			{{-1, 212}, },
			{{-1, 96}, },
			{{-1, 60}, },
			{{-1, 61}, {60, 99}, },
			{{-1, 140}, },
			{{-1, -1}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '>', '~', ',', '.', '&', '#', '+', '**', '@mixin', '@function', '@if', '@for', '@while', '@each', '@include', variable, identifier, EOF",
			"expecting: '.', '&', '#', '**', identifier",
			"expecting: '>', '~', ',', '.', '&', '#', '+', '**', identifier",
			"expecting: '{', '[', '>', '~', ',', '.', '&', '#', '+', '**', identifier",
			"expecting: '{', '.', '&', '#', '**', identifier",
			"expecting: '#', identifier",
			"expecting: 'null', '(', variable, identifier, string literal, number literal, color, url",
			"expecting: variable",
			"expecting: ':'",
			"expecting: '(', '{', '[', '>', '~', ':', ';', ',', '.', '&', '#', '+', '**', identifier",
			"expecting: EOF",
			"expecting: '{'",
			"expecting: '$'",
			"expecting: '(', '{'",
			"expecting: '('",
			"expecting: 'null', '!default', '(', ')', '{', '>', '<', ';', ',', '$', '&&', '||', '+', '*', '/', '-', '==', '!=', variable, identifier, string literal, number literal, color, url",
			"expecting: 'null', '!default', unit, '(', ')', '{', '>', '<', ';', ',', '$', '&&', '||', '+', '*', '/', '-', '==', '!=', variable, identifier, string literal, number literal, color, url",
			"expecting: '{', '&&'",
			"expecting: '!default', ')', '{', ';', ',', '&&', '||'",
			"expecting: '!default', ')', '{', '>', '<', ';', ',', '&&', '||', '==', '!='",
			"expecting: '!default', ')', '{', '>', '<', ';', ',', '&&', '||', '+', '-', '==', '!='",
			"expecting: '!default', ')', '{', '>', '<', ';', ',', '&&', '||', '+', '*', '/', '-', '==', '!='",
			"expecting: 'from'",
			"expecting: 'in', ','",
			"expecting: ';'",
			"expecting: '}', '>', '~', ',', '.', '&', '#', '+', '**', '@mixin', '@function', '@if', '@for', '@while', '@each', '@include', variable, identifier",
			"expecting: '}', '>', '~', ',', '.', '&', '#', '+', '**', '@mixin', '@function', '@if', '@for', '@while', '@each', '@include', variable, identifier, EOF",
			"expecting: identifier",
			"expecting: '{', '['",
			"expecting: ',', '$'",
			"expecting: '(', ')'",
			"expecting: ')', '&&'",
			"expecting: 'null', '(', ')', variable, identifier, string literal, number literal, color, url",
			"expecting: '}', '>', '~', ',', '.', '&', '#', '+', '**', '@mixin', '@function', '@else', '@if', '@for', '@while', '@each', '@include', variable, identifier, EOF",
			"expecting: number literal",
			"expecting: 'null', '(', '#', variable, identifier, string literal, number literal, color, url",
			"expecting: '!default', ';'",
			"expecting: '!default', ';', ',', '&&'",
			"expecting: '{', '[', '>', '~', ':', ',', '.', '&', '#', '+', '**', identifier",
			"expecting: '=', '|=', '~='",
			"expecting: '}'",
			"expecting: ')', ',', '$'",
			"expecting: ')'",
			"expecting: '{', 'if'",
			"expecting: 'through'",
			"expecting: '(', '{', ','",
			"expecting: '{', ','",
			"expecting: '!default', ';', ','",
			"expecting: string literal",
			"expecting: '...'",
			"expecting: ')', '>', '<', ':', '&&', '||', '+', '*', '/', '-', '==', '!='",
			"expecting: ')', ','",
			"expecting: ']'",
			"expecting: ')', '{'",
			"expecting: 'null', '(', ')', ',', '$', variable, identifier, string literal, number literal, color, url",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 1, 3, 4, 1, 3, 5, 5, 6, 7, 6, 7, 5, 8, 9, 10, 0, 11, 3, 3, 3, 3, 0, 3, 3, 3, 3, 12, 3, 3, 11, 13, 14, 15, 6, 15, 14, 15, 16, 15, 15, 17, 18, 19, 20, 21, 21, 22, 17, 23, 24, 6, 25, 26, 27, 3, 28, 3, 28, 0, 27, 29, 11, 26, 30, 31, 32, 15, 6, 33, 6, 6, 6, 6, 6, 6, 6, 6, 6, 34, 26, 35, 7, 23, 23, 26, 36, 37, 33, 25, 25, 25, 38, 25, 39, 3, 28, 28, 40, 12, 5, 41, 26, 11, 42, 15, 15, 31, 18, 43, 33, 26, 33, 19, 20, 20, 20, 20, 21, 21, 21, 21, 44, 6, 45, 11, 11, 11, 46, 46, 23, 35, 23, 24, 26, 6, 47, 47, 6, 33, 25, 48, 48, 48, 9, 5, 8, 49, 41, 41, 26, 11, 15, 6, 26, 33, 26, 34, 50, 51, 26, 5, 46, 46, 6, 46, 46, 11, 26, 37, 47, 24, 52, 52, 52, 8, 6, 41, 53, 49, 41, 26, 17, 11, 6, 11, 48, 51, 51, 46, 46, 46, 46, 26, 25, 28, 28, 28, 41, 54, 53, 33, 26, 51, 8, 51, 11, 51, 54, 54, 54, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
