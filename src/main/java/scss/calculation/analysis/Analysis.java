/* This file was generated by SableCC (http://www.sablecc.org/). */

package scss.calculation.analysis;

import scss.calculation.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAStylesheet(AStylesheet node);
    void caseAAssigmentStatement(AAssigmentStatement node);
    void caseAMixinStatement(AMixinStatement node);
    void caseAIncludeStatement(AIncludeStatement node);
    void caseARulesetStatement(ARulesetStatement node);
    void caseAStatementBlock(AStatementBlock node);
    void caseACallFunctionCall(ACallFunctionCall node);
    void caseASimpleFunctionCall(ASimpleFunctionCall node);
    void caseACommaCommaValue(ACommaCommaValue node);
    void caseASimpleCommaValue(ASimpleCommaValue node);
    void caseADollarVariable(ADollarVariable node);
    void caseADotVariable(ADotVariable node);
    void caseASimpleVariable(ASimpleVariable node);
    void caseAPercUnit(APercUnit node);
    void caseASimpleUnit(ASimpleUnit node);
    void caseAStringValue(AStringValue node);
    void caseATermValue(ATermValue node);
    void caseATrueTerm(ATrueTerm node);
    void caseAColorTerm(AColorTerm node);
    void caseANumberTerm(ANumberTerm node);
    void caseAFalseTerm(AFalseTerm node);
    void caseANullTerm(ANullTerm node);

    void caseTDollar(TDollar node);
    void caseTHash(THash node);
    void caseTDot(TDot node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTAssign(TAssign node);
    void caseTColon(TColon node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTLt(TLt node);
    void caseTLteq(TLteq node);
    void caseTGt(TGt node);
    void caseTGteq(TGteq node);
    void caseTAdd(TAdd node);
    void caseTSub(TSub node);
    void caseTMul(TMul node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTNot(TNot node);
    void caseTMixin(TMixin node);
    void caseTInclude(TInclude node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTNull(TNull node);
    void caseTIdentifier(TIdentifier node);
    void caseTColor(TColor node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTIntegerLiteral(TIntegerLiteral node);
    void caseTBlank(TBlank node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
