/* This file was generated by SableCC (http://www.sablecc.org/). */

package scss.calculation.node;

import java.util.*;
import scss.calculation.analysis.*;

@SuppressWarnings("nls")
public final class AMixinStatement extends PStatement
{
    private TMixin _mixin_;
    private TIdentifier _identifier_;
    private TLPar _lPar_;
    private PCommaValue _first_;
    private final LinkedList<PCommaValue> _second_ = new LinkedList<PCommaValue>();
    private TRPar _rPar_;
    private PBlock _block_;

    public AMixinStatement()
    {
        // Constructor
    }

    public AMixinStatement(
        @SuppressWarnings("hiding") TMixin _mixin_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PCommaValue _first_,
        @SuppressWarnings("hiding") List<?> _second_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") PBlock _block_)
    {
        // Constructor
        setMixin(_mixin_);

        setIdentifier(_identifier_);

        setLPar(_lPar_);

        setFirst(_first_);

        setSecond(_second_);

        setRPar(_rPar_);

        setBlock(_block_);

    }

    @Override
    public Object clone()
    {
        return new AMixinStatement(
            cloneNode(this._mixin_),
            cloneNode(this._identifier_),
            cloneNode(this._lPar_),
            cloneNode(this._first_),
            cloneList(this._second_),
            cloneNode(this._rPar_),
            cloneNode(this._block_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMixinStatement(this);
    }

    public TMixin getMixin()
    {
        return this._mixin_;
    }

    public void setMixin(TMixin node)
    {
        if(this._mixin_ != null)
        {
            this._mixin_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mixin_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PCommaValue getFirst()
    {
        return this._first_;
    }

    public void setFirst(PCommaValue node)
    {
        if(this._first_ != null)
        {
            this._first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._first_ = node;
    }

    public LinkedList<PCommaValue> getSecond()
    {
        return this._second_;
    }

    public void setSecond(List<?> list)
    {
        for(PCommaValue e : this._second_)
        {
            e.parent(null);
        }
        this._second_.clear();

        for(Object obj_e : list)
        {
            PCommaValue e = (PCommaValue) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._second_.add(e);
        }
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public PBlock getBlock()
    {
        return this._block_;
    }

    public void setBlock(PBlock node)
    {
        if(this._block_ != null)
        {
            this._block_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._block_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._mixin_)
            + toString(this._identifier_)
            + toString(this._lPar_)
            + toString(this._first_)
            + toString(this._second_)
            + toString(this._rPar_)
            + toString(this._block_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._mixin_ == child)
        {
            this._mixin_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._first_ == child)
        {
            this._first_ = null;
            return;
        }

        if(this._second_.remove(child))
        {
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._block_ == child)
        {
            this._block_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._mixin_ == oldChild)
        {
            setMixin((TMixin) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._first_ == oldChild)
        {
            setFirst((PCommaValue) newChild);
            return;
        }

        for(ListIterator<PCommaValue> i = this._second_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PCommaValue) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._block_ == oldChild)
        {
            setBlock((PBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
